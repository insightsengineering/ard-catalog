[
  {
    "objectID": "tables/04-QC-TTET01.html",
    "href": "tables/04-QC-TTET01.html",
    "title": "TTET01 - Time-to-Event",
    "section": "",
    "text": "# load libraries\nlibrary(cards)\nlibrary(cardx)\nlibrary(dplyr)\nlibrary(survival)\nlibrary(broom.helpers)\n\n\n\n\n\nShow the code\n# Create a table using the chevron package\nproc_data &lt;- dunlin::log_filter(chevron::syn_data, PARAMCD == \"PFS\", \"adtte\")\ntlg_ttet01 &lt;- chevron::run(chevron::ttet01, proc_data)\nhead(tlg_ttet01, n = 15)\n\n\n                                    A: Drug X       B: Placebo    C: Combination\n                                      (N=15)          (N=15)          (N=15)    \n  ——————————————————————————————————————————————————————————————————————————————\n  Patients with event (%)           7 (46.7%)        12 (80%)       8 (53.3%)   \n    Earliest contributing event                                                 \n      Death                             5               11              7       \n      Disease Progression               2               1               1       \n  Patients without event (%)        8 (53.3%)        3 (20%)        7 (46.7%)   \n  Time to Event (MONTHS)                                                        \n    Median                             8.6             6.2             8.4      \n      95% CI                        (7.3, NE)       (4.8, 7.6)      (7.0, NE)   \n    25% and 75%-ile                  3.8, NE         4.7, 8.4        5.8, NE    \n    Range                         1.2 to 9.5 {1}    0.9 to 9.1    0.9 to 9.5 {1}\n  Unstratified Analysis                                                         \n    p-value (log-rank)                                0.0973          0.9111    \n    Hazard Ratio                                       2.18            1.06     \n    95% CI                                         (0.85, 5.60)    (0.38, 2.94) \n  6 MONTHS                                                                      \n  ——————————————————————————————————————————————————————————————————————————————\n\n  {1} - Censored observation: range maximum\n  ——————————————————————————————————————————————————————————————————————————————\n\n\n\n\n\nA rtables based output can be flattened into a data frame using the as_results_df() function from the rtables package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package.\n\nrtables_results &lt;- rtables::as_result_df(tlg_ttet01, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nhead(rtables_results, n = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\ngroup2\ngroup2_level\nvariable\nvariable_level\nvariable_label\nstat_name\nstat\n\n\n\n\nNA\nNA\nARM\nA: Drug X\nIS_EVENT\ncount_fraction\nPatients with event (%)\ncount\n7.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nIS_EVENT\ncount_fraction\nPatients with event (%)\nfraction\n0.4666667\n\n\nEVNT1\nPatients with event (%)\nARM\nA: Drug X\nEVNTDESC\ncount.Death\nDeath\ncount\n5.0000000\n\n\nEVNT1\nPatients with event (%)\nARM\nA: Drug X\nEVNTDESC\ncount.Disease Progression\nDisease Progression\ncount\n2.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nIS_NOT_EVENT\ncount_fraction\nPatients without event (%)\ncount\n8.0000000\n\n\n\n\n\n\n\n\n\nUsing the {cards} package, we stack the functions ard_continuous() for the continuous variables and ard_categorical() for categorical variables. The default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses.\nIf any variable manipulation was done to the data prior to running the citril/chevron/tern/rtables commands, we suggest supplying the same data to these ARD functions, or running the same pre-processing steps to your data prior to creating ARDs to ensure variable names/levels match.\nNote: when a ‘by’ variable is specified in the ard_stack() call, a univariate tabulation is returned. We will have to remove those observations later in the workflow to create a 1:1 match.\n\n# Data Pre-processing\nadtte &lt;- proc_data$adtte |&gt;\n  dplyr::mutate(\n    AVAL = (AVAL / 30.4375), # convert days to months, this is the same calculation chevron uses.\n    is_event = CNSR == 0, # chevron coding of events\n    is_not_event = CNSR == 1\n  )\n\n# ----- ARDS -----\n# Calculate Event Rates\nard_event_rates &lt;- cards::bind_ard(\n  # Patient Event Rates\n  ard_categorical(adtte, strata = c(ARM), variable = c(is_event), statistic = everything() ~ c(\"n\", \"p\")),\n  # Earliest Contributing Event\n  ard_categorical(adtte |&gt; dplyr::filter(is_event == TRUE), strata = c(ARM), variable = c(EVNTDESC), statistic = everything() ~ c(\"n\"))\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n# Calculate Time to Event\nard_tte &lt;- cards::bind_ard(\n  # calculate median\n  survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.type = \"plain\") |&gt;\n    ard_survival_survfit(probs = 0.5),\n  # calculate quantiles\n  survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.type = \"plain\") |&gt;\n    ard_survival_survfit(probs = c(0.25, 0.75)) |&gt;\n    filter(stat_name == \"estimate\"),\n  # calculate range\n  ard_continuous(adtte, by = c(ARM), variable = c(AVAL), statistic = ~ continuous_summary_fns(c(\"min\", \"max\")))\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns(fct_as_chr = TRUE)\n\n# Calculate Unstratified coxph\n# set the reference arm\nref_arm &lt;- \"A: Drug X\"\n\nard_unstrat_coxph &lt;- ard_pairwise(\n  adtte,\n  variable = ARM,\n  .f = \\(df) {\n    coxph(Surv(AVAL, is_event) ~ ARM, data = df, ties = \"efron\") |&gt;\n      ard_regression(exponentiate = TRUE) |&gt;\n      dplyr::filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\") & variable_level != ref_arm)\n  },\n  include = ref_arm\n) |&gt;\n  bind_ard() |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n# calculate the pvalue\nard_pval &lt;- ard_pairwise(\n  adtte,\n  variable = ARM,\n  .f = \\(df) {\n    ard_survival_survdiff(survival::Surv(AVAL, is_event) ~ ARM, data = df) |&gt;\n      dplyr::filter(stat_name %in% \"p.value\")\n  },\n  include = ref_arm\n) # this produces a list of data frames\n\nard_pval &lt;- lapply(ard_pval, unlist_ard_columns)\nard_pval &lt;- do.call(rbind, ard_pval)\n\n# 6 Months Risk Analysis\nard_surv_time &lt;- survfit(Surv(AVAL, is_event) ~ ARM, adtte, conf.int = 0.95, conf.type = \"plain\") |&gt;\n  ard_survival_survfit(time = 6) |&gt;\n  dplyr::filter(stat_name != \"std.error\") |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n\n\nSurvival Time Difference estimates are calculated usually calculated by the treatment - the control group. It’s been noted that {tern}’s surv_timepoint function and {cardx}’s ard_survival_surfit_diff function calculate this in different orders - resulting in statistics where the absolute value is identical but not the direction. If this is found in your data - you’ll need to relevel the factor for the by variable, such that the treatment group is ordered before the control group. Below, we reorder the level so “B: Placebo” comes before the control group, “A: Drug X”. This is repeated so “C: Combination” comes before “A: Drug X” before computing the ARD.\n\n# difference in event free rate\n# relevel the ARM variable to match the calculation done in tern\nadtte$ARM &lt;- forcats::fct_relevel(adtte$ARM, \"B: Placebo\", after = 0)\nard_surv_time_diff_1 &lt;- survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.int = 0.95, conf.type = \"plain\") |&gt;\n  ard_survival_survfit_diff(times = 6) |&gt;\n  filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\", \"p.value\")) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns() |&gt;\n  filter(group1_level == \"A: Drug X\") |&gt;\n  mutate(group1_level = \"B: Placebo\")\n\n\nadtte$ARM &lt;- forcats::fct_relevel(adtte$ARM, \"B: Placebo\", after = 3)\nard_surv_time_diff_2 &lt;- survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.int = 0.95, conf.type = \"plain\") |&gt;\n  ard_survival_survfit_diff(times = 6) |&gt;\n  filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\", \"p.value\")) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns() |&gt;\n  filter(group1_level == \"C: Combination\")\n\nard_surv_time_diff &lt;- bind_rows(ard_surv_time_diff_1, ard_surv_time_diff_2)\n\nhead(ard_surv_time_diff, n = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nvariable\nvariable_level\ncontext\nstat_name\nstat_label\nstat\nstat_fmt\nfmt_fn\nwarning\nerror\n\n\n\n\nARM\nB: Placebo\ntime\n6\nsurvival_survfit_diff\nestimate\nSurvival Difference\n-0.2000000\n-0.2\n1\nNULL\nNULL\n\n\nARM\nB: Placebo\ntime\n6\nsurvival_survfit_diff\nconf.low\nCI Lower Bound\n-0.5373737\n-0.5\n1\nNULL\nNULL\n\n\nARM\nB: Placebo\ntime\n6\nsurvival_survfit_diff\nconf.high\nCI Upper Bound\n0.1373737\n0.1\n1\nNULL\nNULL\n\n\nARM\nB: Placebo\ntime\n6\nsurvival_survfit_diff\np.value\np-value\n0.2452781\n0.2\n1\nNULL\nNULL\n\n\nARM\nC: Combination\ntime\n6\nsurvival_survfit_diff\nestimate\nSurvival Difference\n0.0000000\n0.0\n1\nNULL\nNULL\n\n\n\n\n\n\n\n\n\n\nTo ensure the {rtables} and ARD results and compatiable for comparison, some reformatting will need to be applied and may be different for each sub-table. Below is a helper function created to apply a row transformation for duplicate stat_namein the {rtables} result. For example, two rows may be called “rate_ci” where one row is the lower bound of the confidence interval and the other is the upper bound. This function transforms these rows using the new stat_name values provided in the values parameter.\n\n# function to apply row-based transformation\napply_row_transformation &lt;- function(data, condition, values) {\n  data |&gt;\n    group_by(group = (variable_level == condition)) |&gt;\n    mutate(\n      row_num = row_number(),\n      variable_level = case_when(\n        group & row_number() %% 2 == 1 ~ values[1], # Odd row in condition group\n        group & row_number() %% 2 == 0 ~ values[2], # Even row in condition group\n        TRUE ~ variable_level # Keep original value\n      )\n    ) |&gt;\n    ungroup() |&gt;\n    select(-group, -row_num) # Remove temporary columns\n}\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Recode “count” to “n” and “fraction” to “p” to match ARD\nFor ARD: 1. recode variable to match {rtables}\n\n# {rtables}\nrtables_event_rate &lt;- rtables_results |&gt;\n  filter(variable_label == \"Patients with event (%)\" | variable_label == \"Patients without event (%)\" | group1_level == \"Patients with event (%)\") |&gt;\n  dplyr::rename(\n    group1 = group2,\n    group1_level = group2_level,\n    # rename other vars to avoid error\n    group2 = group1,\n    group2_level = group1_level\n  ) |&gt;\n  dplyr::select(c(group1, group1_level, variable, stat_name, stat)) |&gt;\n  dplyr::mutate(\n    stat_name = dplyr::recode(stat_name, \"count\" = \"n\"),\n    stat_name = dplyr::recode(stat_name, \"fraction\" = \"p\")\n  )\n\n# {cards}\nard_event_rates &lt;- ard_event_rates |&gt;\n  mutate(\n    variable = recode(variable, \"is_event\" = \"IS_EVENT\"),\n    variable = ifelse(variable_level == FALSE & variable != \"EVNTDESC\", \"IS_NOT_EVENT\", variable)\n  ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"stat_name\", \"stat\"))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_event_rate,\n  ard_event_rates,\n  keys = c(\"group1\", \"group1_level\", \"variable\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Apply row transformations to differentiate bounds of stats 4. Recode “median” to “estimate” to match ARD\n\n# {rtables}\nrtables_tte &lt;- rtables_results |&gt;\n  filter(variable == \"time_to_event\") |&gt;\n  rename(\n    group1 = group2,\n    group1_level = group2_level,\n    group2 = group1,\n    group2_level = group1_level\n  ) |&gt;\n  apply_row_transformation(\"95% CI\", c(\"conf.low\", \"conf.high\")) |&gt;\n  apply_row_transformation(\"Range\", c(\"min\", \"max\")) |&gt;\n  apply_row_transformation(\"25% and 75%-ile\", c(\"0.25\", \"0.75\")) |&gt;\n  mutate(variable_level = recode(variable_level, \"Median\" = \"estimate\")) |&gt;\n  dplyr::select(c(group1, group1_level, variable_level, stat)) |&gt;\n  rename(stat_name = variable_level)\n\n# {cards}\nard_tte &lt;- ard_tte |&gt;\n  mutate(\n    stat_name = if_else(\n      variable_level %in% c(\"0.25\", \"0.75\") & stat_name == \"estimate\",\n      as.character(variable_level), # Convert to character if true\n      stat_name # Keep original stat_name if false\n    )\n  ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"stat_name\", \"stat\"))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_tte,\n  ard_tte,\n  keys = c(\"group1\", \"group1_level\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Apply row transformations to differentiate bounds of stats 4. Recode “hr” to “estimate” to match ARD\nFor ARD: 1. Recode variable to match {rtables} 2. Set attributes to NULL\n\n# {rtables}\nrtables_unstrat_coxph &lt;- rtables_results |&gt;\n  filter(variable == \"coxph_unstratified\" & !is.na(stat) & variable_level != \"pvalue\") |&gt;\n  select(\"group2\", \"group2_level\", \"variable_level\", \"stat\") |&gt;\n  apply_row_transformation(\"hr_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(\n    variable = group2,\n    variable_level = group2_level,\n    stat_name = variable_level\n  ) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name, \"hr\" = \"estimate\"))\n\n# logpvalue\nrtables_pval &lt;- rtables_results |&gt;\n  filter(variable_level == \"pvalue\" & !is.na(stat)) |&gt;\n  select(\"group2_level\", \"stat\") |&gt;\n  rename(\"rowname\" = \"group2_level\")\n\n# {cards}/{cardx}\nard_unstrat_coxph &lt;- ard_unstrat_coxph |&gt;\n  dplyr::select(c(\"variable\", \"variable_level\", \"stat_name\", \"stat\"))\nattr(ard_unstrat_coxph$variable_level, \"names\") &lt;- NULL\nattr(ard_unstrat_coxph$stat, \"names\") &lt;- NULL\n\n# log_pval\nard_pval &lt;- ard_pval |&gt;\n  tibble::rownames_to_column() |&gt;\n  select(c(\"rowname\", \"stat\"))\nard_pval$rowname &lt;- sub(\".*vs\\\\.\\\\s*\", \"\", ard_pval$rowname)\nard_pval$rowname &lt;- sub(\"^'(.*)'$\", \"\\\\1\", ard_pval$rowname)\n\n# Compare stats\ndiffdf::diffdf(\n  rtables_unstrat_coxph,\n  ard_unstrat_coxph,\n  keys = c(\"variable\", \"variable_level\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n# Log pvalue\ndiffdf::diffdf(\n  rtables_pval,\n  ard_pval,\n  keys = c(\"rowname\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Apply row transformations to differentiate bounds of stats 4. Recode “pt_at_risk” to “n.risk” and “event_free_rate” to “estimate” to match ARD\nFor ARD: 1. Recode variable to match {rtables} 2. Format proportions to scale of 100\n\n# {rtables}\nrtables_surv_time &lt;- rtables_results |&gt;\n  filter(variable == \"surv_6\") |&gt;\n  select(c(\"group2_level\", \"variable_level\", \"stat\")) |&gt;\n  apply_row_transformation(\"rate_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(\n    group1_level = group2_level,\n    stat_name = variable_level\n  ) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name,\n    \"pt_at_risk\" = \"n.risk\",\n    \"event_free_rate\" = \"estimate\"\n  ))\n# {cards}/{cardx}\nard_surv_time &lt;- ard_surv_time |&gt;\n  select(\"group1_level\", \"stat_name\", \"stat\") |&gt;\n  mutate(\n    stat = case_when(\n      stat_name == \"estimate\" ~ stat * 100,\n      stat_name == \"conf.low\" ~ stat * 100,\n      stat_name == \"conf.high\" ~ stat * 100,\n      TRUE ~ stat\n    )\n  )\n\n# Compare stats\ndiffdf::diffdf(\n  rtables_surv_time,\n  ard_surv_time,\n  keys = c(\"group1_level\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Apply row transformations to differentiate bounds of stats 4. Recode “rate_diff” to “estimate” and “ztest_pval” to “p.value” to match ARD\nFor ARD: 1. Recode variable to match {rtables} 2. Format proportions to scale of 100\nThe numeric values of the results are identical but differing directions (due to the A vs. B and B vs. A type differences in the calculations).\n\n# {rtables}\nrtables_surv_diff &lt;- rtables_results |&gt;\n  filter(variable == \"surv_diff_6\" & !is.na(stat)) |&gt;\n  select(c(\"group2_level\", \"variable_level\", \"stat\")) |&gt;\n  apply_row_transformation(\"rate_diff_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(\n    group1_level = group2_level,\n    stat_name = variable_level\n  ) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name,\n    \"rate_diff\" = \"estimate\",\n    \"ztest_pval\" = \"p.value\"\n  ))\n# {cards}/{cardx}\nard_surv_time_diff &lt;- ard_surv_time_diff |&gt;\n  select(\"group1_level\", \"stat_name\", \"stat\") |&gt;\n  mutate(\n    stat = case_when(\n      stat_name == \"estimate\" ~ stat * 100,\n      stat_name == \"conf.low\" ~ stat * 100,\n      stat_name == \"conf.high\" ~ stat * 100,\n      TRUE ~ stat\n    )\n  )\n\n# compare stats\ndiffdf::diffdf(\n  rtables_surv_diff,\n  ard_surv_time_diff,\n  keys = c(\"group1_level\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!",
    "crumbs": [
      "Tables",
      "TTET01 - Time-to-Event"
    ]
  },
  {
    "objectID": "tables/04-QC-TTET01.html#generate-a-table-using-chevron",
    "href": "tables/04-QC-TTET01.html#generate-a-table-using-chevron",
    "title": "TTET01 - Time-to-Event",
    "section": "",
    "text": "Show the code\n# Create a table using the chevron package\nproc_data &lt;- dunlin::log_filter(chevron::syn_data, PARAMCD == \"PFS\", \"adtte\")\ntlg_ttet01 &lt;- chevron::run(chevron::ttet01, proc_data)\nhead(tlg_ttet01, n = 15)\n\n\n                                    A: Drug X       B: Placebo    C: Combination\n                                      (N=15)          (N=15)          (N=15)    \n  ——————————————————————————————————————————————————————————————————————————————\n  Patients with event (%)           7 (46.7%)        12 (80%)       8 (53.3%)   \n    Earliest contributing event                                                 \n      Death                             5               11              7       \n      Disease Progression               2               1               1       \n  Patients without event (%)        8 (53.3%)        3 (20%)        7 (46.7%)   \n  Time to Event (MONTHS)                                                        \n    Median                             8.6             6.2             8.4      \n      95% CI                        (7.3, NE)       (4.8, 7.6)      (7.0, NE)   \n    25% and 75%-ile                  3.8, NE         4.7, 8.4        5.8, NE    \n    Range                         1.2 to 9.5 {1}    0.9 to 9.1    0.9 to 9.5 {1}\n  Unstratified Analysis                                                         \n    p-value (log-rank)                                0.0973          0.9111    \n    Hazard Ratio                                       2.18            1.06     \n    95% CI                                         (0.85, 5.60)    (0.38, 2.94) \n  6 MONTHS                                                                      \n  ——————————————————————————————————————————————————————————————————————————————\n\n  {1} - Censored observation: range maximum\n  ——————————————————————————————————————————————————————————————————————————————",
    "crumbs": [
      "Tables",
      "TTET01 - Time-to-Event"
    ]
  },
  {
    "objectID": "tables/04-QC-TTET01.html#flatten-the-table-into-a-data.frame",
    "href": "tables/04-QC-TTET01.html#flatten-the-table-into-a-data.frame",
    "title": "TTET01 - Time-to-Event",
    "section": "",
    "text": "A rtables based output can be flattened into a data frame using the as_results_df() function from the rtables package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package.\n\nrtables_results &lt;- rtables::as_result_df(tlg_ttet01, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nhead(rtables_results, n = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\ngroup2\ngroup2_level\nvariable\nvariable_level\nvariable_label\nstat_name\nstat\n\n\n\n\nNA\nNA\nARM\nA: Drug X\nIS_EVENT\ncount_fraction\nPatients with event (%)\ncount\n7.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nIS_EVENT\ncount_fraction\nPatients with event (%)\nfraction\n0.4666667\n\n\nEVNT1\nPatients with event (%)\nARM\nA: Drug X\nEVNTDESC\ncount.Death\nDeath\ncount\n5.0000000\n\n\nEVNT1\nPatients with event (%)\nARM\nA: Drug X\nEVNTDESC\ncount.Disease Progression\nDisease Progression\ncount\n2.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nIS_NOT_EVENT\ncount_fraction\nPatients without event (%)\ncount\n8.0000000",
    "crumbs": [
      "Tables",
      "TTET01 - Time-to-Event"
    ]
  },
  {
    "objectID": "tables/04-QC-TTET01.html#create-comparable-ards",
    "href": "tables/04-QC-TTET01.html#create-comparable-ards",
    "title": "TTET01 - Time-to-Event",
    "section": "",
    "text": "Using the {cards} package, we stack the functions ard_continuous() for the continuous variables and ard_categorical() for categorical variables. The default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses.\nIf any variable manipulation was done to the data prior to running the citril/chevron/tern/rtables commands, we suggest supplying the same data to these ARD functions, or running the same pre-processing steps to your data prior to creating ARDs to ensure variable names/levels match.\nNote: when a ‘by’ variable is specified in the ard_stack() call, a univariate tabulation is returned. We will have to remove those observations later in the workflow to create a 1:1 match.\n\n# Data Pre-processing\nadtte &lt;- proc_data$adtte |&gt;\n  dplyr::mutate(\n    AVAL = (AVAL / 30.4375), # convert days to months, this is the same calculation chevron uses.\n    is_event = CNSR == 0, # chevron coding of events\n    is_not_event = CNSR == 1\n  )\n\n# ----- ARDS -----\n# Calculate Event Rates\nard_event_rates &lt;- cards::bind_ard(\n  # Patient Event Rates\n  ard_categorical(adtte, strata = c(ARM), variable = c(is_event), statistic = everything() ~ c(\"n\", \"p\")),\n  # Earliest Contributing Event\n  ard_categorical(adtte |&gt; dplyr::filter(is_event == TRUE), strata = c(ARM), variable = c(EVNTDESC), statistic = everything() ~ c(\"n\"))\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n# Calculate Time to Event\nard_tte &lt;- cards::bind_ard(\n  # calculate median\n  survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.type = \"plain\") |&gt;\n    ard_survival_survfit(probs = 0.5),\n  # calculate quantiles\n  survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.type = \"plain\") |&gt;\n    ard_survival_survfit(probs = c(0.25, 0.75)) |&gt;\n    filter(stat_name == \"estimate\"),\n  # calculate range\n  ard_continuous(adtte, by = c(ARM), variable = c(AVAL), statistic = ~ continuous_summary_fns(c(\"min\", \"max\")))\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns(fct_as_chr = TRUE)\n\n# Calculate Unstratified coxph\n# set the reference arm\nref_arm &lt;- \"A: Drug X\"\n\nard_unstrat_coxph &lt;- ard_pairwise(\n  adtte,\n  variable = ARM,\n  .f = \\(df) {\n    coxph(Surv(AVAL, is_event) ~ ARM, data = df, ties = \"efron\") |&gt;\n      ard_regression(exponentiate = TRUE) |&gt;\n      dplyr::filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\") & variable_level != ref_arm)\n  },\n  include = ref_arm\n) |&gt;\n  bind_ard() |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n# calculate the pvalue\nard_pval &lt;- ard_pairwise(\n  adtte,\n  variable = ARM,\n  .f = \\(df) {\n    ard_survival_survdiff(survival::Surv(AVAL, is_event) ~ ARM, data = df) |&gt;\n      dplyr::filter(stat_name %in% \"p.value\")\n  },\n  include = ref_arm\n) # this produces a list of data frames\n\nard_pval &lt;- lapply(ard_pval, unlist_ard_columns)\nard_pval &lt;- do.call(rbind, ard_pval)\n\n# 6 Months Risk Analysis\nard_surv_time &lt;- survfit(Surv(AVAL, is_event) ~ ARM, adtte, conf.int = 0.95, conf.type = \"plain\") |&gt;\n  ard_survival_survfit(time = 6) |&gt;\n  dplyr::filter(stat_name != \"std.error\") |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n\n\nSurvival Time Difference estimates are calculated usually calculated by the treatment - the control group. It’s been noted that {tern}’s surv_timepoint function and {cardx}’s ard_survival_surfit_diff function calculate this in different orders - resulting in statistics where the absolute value is identical but not the direction. If this is found in your data - you’ll need to relevel the factor for the by variable, such that the treatment group is ordered before the control group. Below, we reorder the level so “B: Placebo” comes before the control group, “A: Drug X”. This is repeated so “C: Combination” comes before “A: Drug X” before computing the ARD.\n\n# difference in event free rate\n# relevel the ARM variable to match the calculation done in tern\nadtte$ARM &lt;- forcats::fct_relevel(adtte$ARM, \"B: Placebo\", after = 0)\nard_surv_time_diff_1 &lt;- survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.int = 0.95, conf.type = \"plain\") |&gt;\n  ard_survival_survfit_diff(times = 6) |&gt;\n  filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\", \"p.value\")) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns() |&gt;\n  filter(group1_level == \"A: Drug X\") |&gt;\n  mutate(group1_level = \"B: Placebo\")\n\n\nadtte$ARM &lt;- forcats::fct_relevel(adtte$ARM, \"B: Placebo\", after = 3)\nard_surv_time_diff_2 &lt;- survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.int = 0.95, conf.type = \"plain\") |&gt;\n  ard_survival_survfit_diff(times = 6) |&gt;\n  filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\", \"p.value\")) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns() |&gt;\n  filter(group1_level == \"C: Combination\")\n\nard_surv_time_diff &lt;- bind_rows(ard_surv_time_diff_1, ard_surv_time_diff_2)\n\nhead(ard_surv_time_diff, n = 5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nvariable\nvariable_level\ncontext\nstat_name\nstat_label\nstat\nstat_fmt\nfmt_fn\nwarning\nerror\n\n\n\n\nARM\nB: Placebo\ntime\n6\nsurvival_survfit_diff\nestimate\nSurvival Difference\n-0.2000000\n-0.2\n1\nNULL\nNULL\n\n\nARM\nB: Placebo\ntime\n6\nsurvival_survfit_diff\nconf.low\nCI Lower Bound\n-0.5373737\n-0.5\n1\nNULL\nNULL\n\n\nARM\nB: Placebo\ntime\n6\nsurvival_survfit_diff\nconf.high\nCI Upper Bound\n0.1373737\n0.1\n1\nNULL\nNULL\n\n\nARM\nB: Placebo\ntime\n6\nsurvival_survfit_diff\np.value\np-value\n0.2452781\n0.2\n1\nNULL\nNULL\n\n\nARM\nC: Combination\ntime\n6\nsurvival_survfit_diff\nestimate\nSurvival Difference\n0.0000000\n0.0\n1\nNULL\nNULL",
    "crumbs": [
      "Tables",
      "TTET01 - Time-to-Event"
    ]
  },
  {
    "objectID": "tables/04-QC-TTET01.html#statistics-comparison",
    "href": "tables/04-QC-TTET01.html#statistics-comparison",
    "title": "TTET01 - Time-to-Event",
    "section": "",
    "text": "To ensure the {rtables} and ARD results and compatiable for comparison, some reformatting will need to be applied and may be different for each sub-table. Below is a helper function created to apply a row transformation for duplicate stat_namein the {rtables} result. For example, two rows may be called “rate_ci” where one row is the lower bound of the confidence interval and the other is the upper bound. This function transforms these rows using the new stat_name values provided in the values parameter.\n\n# function to apply row-based transformation\napply_row_transformation &lt;- function(data, condition, values) {\n  data |&gt;\n    group_by(group = (variable_level == condition)) |&gt;\n    mutate(\n      row_num = row_number(),\n      variable_level = case_when(\n        group & row_number() %% 2 == 1 ~ values[1], # Odd row in condition group\n        group & row_number() %% 2 == 0 ~ values[2], # Even row in condition group\n        TRUE ~ variable_level # Keep original value\n      )\n    ) |&gt;\n    ungroup() |&gt;\n    select(-group, -row_num) # Remove temporary columns\n}\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Recode “count” to “n” and “fraction” to “p” to match ARD\nFor ARD: 1. recode variable to match {rtables}\n\n# {rtables}\nrtables_event_rate &lt;- rtables_results |&gt;\n  filter(variable_label == \"Patients with event (%)\" | variable_label == \"Patients without event (%)\" | group1_level == \"Patients with event (%)\") |&gt;\n  dplyr::rename(\n    group1 = group2,\n    group1_level = group2_level,\n    # rename other vars to avoid error\n    group2 = group1,\n    group2_level = group1_level\n  ) |&gt;\n  dplyr::select(c(group1, group1_level, variable, stat_name, stat)) |&gt;\n  dplyr::mutate(\n    stat_name = dplyr::recode(stat_name, \"count\" = \"n\"),\n    stat_name = dplyr::recode(stat_name, \"fraction\" = \"p\")\n  )\n\n# {cards}\nard_event_rates &lt;- ard_event_rates |&gt;\n  mutate(\n    variable = recode(variable, \"is_event\" = \"IS_EVENT\"),\n    variable = ifelse(variable_level == FALSE & variable != \"EVNTDESC\", \"IS_NOT_EVENT\", variable)\n  ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"stat_name\", \"stat\"))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_event_rate,\n  ard_event_rates,\n  keys = c(\"group1\", \"group1_level\", \"variable\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Apply row transformations to differentiate bounds of stats 4. Recode “median” to “estimate” to match ARD\n\n# {rtables}\nrtables_tte &lt;- rtables_results |&gt;\n  filter(variable == \"time_to_event\") |&gt;\n  rename(\n    group1 = group2,\n    group1_level = group2_level,\n    group2 = group1,\n    group2_level = group1_level\n  ) |&gt;\n  apply_row_transformation(\"95% CI\", c(\"conf.low\", \"conf.high\")) |&gt;\n  apply_row_transformation(\"Range\", c(\"min\", \"max\")) |&gt;\n  apply_row_transformation(\"25% and 75%-ile\", c(\"0.25\", \"0.75\")) |&gt;\n  mutate(variable_level = recode(variable_level, \"Median\" = \"estimate\")) |&gt;\n  dplyr::select(c(group1, group1_level, variable_level, stat)) |&gt;\n  rename(stat_name = variable_level)\n\n# {cards}\nard_tte &lt;- ard_tte |&gt;\n  mutate(\n    stat_name = if_else(\n      variable_level %in% c(\"0.25\", \"0.75\") & stat_name == \"estimate\",\n      as.character(variable_level), # Convert to character if true\n      stat_name # Keep original stat_name if false\n    )\n  ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"stat_name\", \"stat\"))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_tte,\n  ard_tte,\n  keys = c(\"group1\", \"group1_level\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Apply row transformations to differentiate bounds of stats 4. Recode “hr” to “estimate” to match ARD\nFor ARD: 1. Recode variable to match {rtables} 2. Set attributes to NULL\n\n# {rtables}\nrtables_unstrat_coxph &lt;- rtables_results |&gt;\n  filter(variable == \"coxph_unstratified\" & !is.na(stat) & variable_level != \"pvalue\") |&gt;\n  select(\"group2\", \"group2_level\", \"variable_level\", \"stat\") |&gt;\n  apply_row_transformation(\"hr_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(\n    variable = group2,\n    variable_level = group2_level,\n    stat_name = variable_level\n  ) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name, \"hr\" = \"estimate\"))\n\n# logpvalue\nrtables_pval &lt;- rtables_results |&gt;\n  filter(variable_level == \"pvalue\" & !is.na(stat)) |&gt;\n  select(\"group2_level\", \"stat\") |&gt;\n  rename(\"rowname\" = \"group2_level\")\n\n# {cards}/{cardx}\nard_unstrat_coxph &lt;- ard_unstrat_coxph |&gt;\n  dplyr::select(c(\"variable\", \"variable_level\", \"stat_name\", \"stat\"))\nattr(ard_unstrat_coxph$variable_level, \"names\") &lt;- NULL\nattr(ard_unstrat_coxph$stat, \"names\") &lt;- NULL\n\n# log_pval\nard_pval &lt;- ard_pval |&gt;\n  tibble::rownames_to_column() |&gt;\n  select(c(\"rowname\", \"stat\"))\nard_pval$rowname &lt;- sub(\".*vs\\\\.\\\\s*\", \"\", ard_pval$rowname)\nard_pval$rowname &lt;- sub(\"^'(.*)'$\", \"\\\\1\", ard_pval$rowname)\n\n# Compare stats\ndiffdf::diffdf(\n  rtables_unstrat_coxph,\n  ard_unstrat_coxph,\n  keys = c(\"variable\", \"variable_level\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n# Log pvalue\ndiffdf::diffdf(\n  rtables_pval,\n  ard_pval,\n  keys = c(\"rowname\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Apply row transformations to differentiate bounds of stats 4. Recode “pt_at_risk” to “n.risk” and “event_free_rate” to “estimate” to match ARD\nFor ARD: 1. Recode variable to match {rtables} 2. Format proportions to scale of 100\n\n# {rtables}\nrtables_surv_time &lt;- rtables_results |&gt;\n  filter(variable == \"surv_6\") |&gt;\n  select(c(\"group2_level\", \"variable_level\", \"stat\")) |&gt;\n  apply_row_transformation(\"rate_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(\n    group1_level = group2_level,\n    stat_name = variable_level\n  ) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name,\n    \"pt_at_risk\" = \"n.risk\",\n    \"event_free_rate\" = \"estimate\"\n  ))\n# {cards}/{cardx}\nard_surv_time &lt;- ard_surv_time |&gt;\n  select(\"group1_level\", \"stat_name\", \"stat\") |&gt;\n  mutate(\n    stat = case_when(\n      stat_name == \"estimate\" ~ stat * 100,\n      stat_name == \"conf.low\" ~ stat * 100,\n      stat_name == \"conf.high\" ~ stat * 100,\n      TRUE ~ stat\n    )\n  )\n\n# Compare stats\ndiffdf::diffdf(\n  rtables_surv_time,\n  ard_surv_time,\n  keys = c(\"group1_level\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\nFor {rtables}: 1. Filter for event rate statistics. 2. Rename the grouping variables to match ARD 3. Apply row transformations to differentiate bounds of stats 4. Recode “rate_diff” to “estimate” and “ztest_pval” to “p.value” to match ARD\nFor ARD: 1. Recode variable to match {rtables} 2. Format proportions to scale of 100\nThe numeric values of the results are identical but differing directions (due to the A vs. B and B vs. A type differences in the calculations).\n\n# {rtables}\nrtables_surv_diff &lt;- rtables_results |&gt;\n  filter(variable == \"surv_diff_6\" & !is.na(stat)) |&gt;\n  select(c(\"group2_level\", \"variable_level\", \"stat\")) |&gt;\n  apply_row_transformation(\"rate_diff_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(\n    group1_level = group2_level,\n    stat_name = variable_level\n  ) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name,\n    \"rate_diff\" = \"estimate\",\n    \"ztest_pval\" = \"p.value\"\n  ))\n# {cards}/{cardx}\nard_surv_time_diff &lt;- ard_surv_time_diff |&gt;\n  select(\"group1_level\", \"stat_name\", \"stat\") |&gt;\n  mutate(\n    stat = case_when(\n      stat_name == \"estimate\" ~ stat * 100,\n      stat_name == \"conf.low\" ~ stat * 100,\n      stat_name == \"conf.high\" ~ stat * 100,\n      TRUE ~ stat\n    )\n  )\n\n# compare stats\ndiffdf::diffdf(\n  rtables_surv_diff,\n  ard_surv_time_diff,\n  keys = c(\"group1_level\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!",
    "crumbs": [
      "Tables",
      "TTET01 - Time-to-Event"
    ]
  },
  {
    "objectID": "tables/02-QC-AET02.html",
    "href": "tables/02-QC-AET02.html",
    "title": "AET02 - Adverse Events",
    "section": "",
    "text": "# load libraries\nlibrary(cards)\n\n\n\n\n\nShow the code\ntlg_aet02 &lt;- chevron::aet02_main(chevron::syn_data, arm_var = \"ARM\", lbl_overall = \"Overall ARM\")\nhead(tlg_aet02, n = 15)\n\n\n                                                             A: Drug X    B: Placebo   C: Combination   Overall ARM\n                                                               (N=15)       (N=15)         (N=15)         (N=45)   \n———————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nTotal number of patients with at least one adverse event     13 (86.7%)   14 (93.3%)     15 (100%)      42 (93.3%) \nOverall total number of events                                   58           59             99             216    \ncl A.1                                                                                                             \n  Total number of patients with at least one adverse event   7 (46.7%)    6 (40.0%)      10 (66.7%)     23 (51.1%) \n  Total number of events                                         8            11             16             35     \n  dcd A.1.1.1.1                                              3 (20.0%)     1 (6.7%)      6 (40.0%)      10 (22.2%) \n  dcd A.1.1.1.2                                              5 (33.3%)    6 (40.0%)      6 (40.0%)      17 (37.8%) \ncl B.1                                                                                                             \n  Total number of patients with at least one adverse event   5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \n  Total number of events                                         6            6              12             24     \n  dcd B.1.1.1.1                                              5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \ncl B.2                                                                                                             \n  Total number of patients with at least one adverse event   11 (73.3%)   8 (53.3%)      10 (66.7%)     29 (64.4%) \n  Total number of events                                         18           15             20             53     \n  dcd B.2.1.2.1                                              5 (33.3%)    6 (40.0%)      5 (33.3%)      16 (35.6%) \n\n\n\n\n\nA {rtables} based output can be flattened into a data.frame using the as_results_df() function from the {rtables} package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package. Setting the add_tbl_str_decimals to FALSE will not return a column with the statistic as a formatted string. We also include a step to remove the “label” attribute for the statistics. The diffdf() function is sensitive to attribute mismatch, so we will remove them (set to NULL) to match the ARD results exactly.\n\nrtables_result &lt;- rtables::as_result_df(tlg_aet02, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nattr(rtables_result$stat, \"label\") &lt;- NULL\n\nrtables_result[1:6, c(\"group2\", \"group2_level\", \"variable\", \"variable_level\", \"stat\")]\n\n\n\n\n\ngroup2\ngroup2_level\nvariable\nvariable_level\nstat\n\n\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n13.0000000\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n0.8666667\n\n\nARM\nA: Drug X\nUSUBJID\nnonunique\n58.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n7.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n0.4666667\n\n\nARM\nA: Drug X\nAEBODSYS\nnonunique\n8.0000000\n\n\n\n\n\n\n\n\n\nIn the code below, we perform different data pre-processing for the different ARDs we want to create. Then, we generate separate ARDs using the {cards} package for the different sections of the AET02 table and compare them as subsets. Note: If your table does not have an “overall” column, you can use the ARD creation steps at the bottom of the page using primarily ard_categorical(). ard_hierarchical() is useful here to calculate the statistics for the overall column and allows for better filtering using the “context” column.\n\n# data pre-processing. filter observations with ANL01FL = \"Y\"\nadae &lt;- chevron::syn_data$adae |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\nadsl &lt;- chevron::syn_data$adsl |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\n\n# ----- ARDS -----\nard_result &lt;- ard_stack_hierarchical(\n  data = adae,\n  variables = c(ANL01FL, AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  overall = TRUE,\n  id = USUBJID,\n  statistic = ~ c(\"n\", \"p\")\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns() |&gt;\n  dplyr::filter(context == \"hierarchical\")\n\nard_count_result &lt;-\n  ard_stack_hierarchical_count(\n    data = adae,\n    variables = c(ANL01FL, AEBODSYS),\n    by = ARM,\n    overall = TRUE,\n    denominator = ADSL\n  ) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns() |&gt;\n  dplyr::filter(context == \"hierarchical_count\")\n\n\n\n\nWe’ll modify the rtables result to closely match the ARD result:\n\nRename “group2_level” to “ARM” to match the ARD.\nRemove any columns that aren’t in the ARD result (stat_name is being removed as it is a blank column)\n\n\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::rename(\n    group1_level = group2_level,\n    group1 = group2,\n    group2 = group1,\n    group2_level = group1_level\n  )\n\nhead(rtables_result, n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup2\ngroup2_level\ngroup1\ngroup1_level\nvariable\nvariable_level\nvariable_label\nstat_name\nstat\n\n\n\n\nNA\nNA\nARM\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\nNA\n13.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\nNA\n0.8666667\n\n\nNA\nNA\nARM\nA: Drug X\nUSUBJID\nnonunique\nOverall total number of events\nNA\n58.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\nNA\n7.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\nNA\n0.4666667\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEBODSYS\nnonunique\nTotal number of events\nNA\n8.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\nNA\n3.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\nNA\n0.2000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\nNA\n5.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\nNA\n0.3333333\n\n\n\n\n\n\nWe can compare the data in subsets to minimize reformatting steps\n\n# subgroup analysis\nrtables_result_sub1 &lt;- rtables_result |&gt;\n  dplyr::filter(variable == \"AEDECOD\") |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\nard_sub1 &lt;- ard_result |&gt;\n  dplyr::filter(variable == \"AEDECOD\") |&gt;\n  dplyr::mutate(\n    group1 = dplyr::case_when(\n      group1 == \"ANL01FL\" ~ \"ARM\",\n      TRUE ~ group1\n    ),\n    group1_level = dplyr::case_when(\n      group1_level == \"Y\" ~ \"Overall ARM\",\n      TRUE ~ group1_level\n    )\n  ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\n\ndiffdf::diffdf(rtables_result_sub1, ard_sub1, keys = c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\nNo issues were found!\n\n\nCompare the second subset\n\nrtables_result_sub2 &lt;- rtables_result |&gt;\n  dplyr::filter(variable %in% c(\"USUBJID\", \"AEBODSYS\") & variable_level != \"nonunique\") |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"stat\")) |&gt;\n  dplyr::rename(\n    variable = group2,\n    variable_level = group2_level\n  ) |&gt;\n  dplyr::mutate(\n    variable = dplyr::coalesce(variable, \"ANL01FL\"),\n    variable_level = dplyr::coalesce(variable_level, \"Y\")\n  )\n\nard_sub2 &lt;- ard_result |&gt;\n  dplyr::filter(variable %in% c(\"ANL01FL\", \"AEBODSYS\")) |&gt;\n  dplyr::mutate(\n    group1 = dplyr::recode(group1, \"ANL01FL\" = \"ARM\"),\n    group1_level = dplyr::recode(group1_level, \"Y\" = \"Overall ARM\"),\n    group1 = dplyr::coalesce(group1, \"ARM\"),\n    group1_level = dplyr::coalesce(group1_level, \"Overall ARM\")\n  ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\ndiffdf::diffdf(rtables_result_sub2, ard_sub2, keys = c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\nNo issues were found!\n\n\nTotal Number of Events (ARD counts data.frame)\n\n# reformat rtables\nrtables_count &lt;- rtables_result |&gt;\n  dplyr::filter(variable_label %in% c(\"Total number of events\", \"Overall total number of events\")) |&gt;\n  dplyr::mutate(\n    group2 = dplyr::case_when(\n      variable_label == \"Overall total number of events\" ~ \"ANL01FL\",\n      TRUE ~ group2\n    ),\n    group2_level = dplyr::case_when(\n      variable_label == \"Overall total number of events\" ~ \"Y\",\n      TRUE ~ group2_level\n    )\n  ) |&gt;\n  dplyr::select(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"stat\")\n\n# reformat ARD result\nard_count_result &lt;- ard_count_result |&gt;\n  dplyr::mutate(\n    group1 = dplyr::coalesce(group1, \"ARM\"),\n    group1_level = dplyr::coalesce(group1_level, \"Overall ARM\"),\n    group1 = dplyr::case_when(\n      group1 == \"ANL01FL\" ~ \"ARM\",\n      TRUE ~ group1\n    ),\n    group1_level = dplyr::case_when(\n      group1_level == \"Y\" ~ \"Overall ARM\",\n      TRUE ~ group1_level\n    )\n  ) |&gt;\n  dplyr::select(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\") |&gt;\n  dplyr::rename(\n    group2 = variable,\n    group2_level = variable_level\n  )\n\ndiffdf::diffdf(rtables_count, ard_count_result, keys = c(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"stat\"))\n\nNo issues were found!",
    "crumbs": [
      "Tables",
      "AET02 - Adverse Events"
    ]
  },
  {
    "objectID": "tables/02-QC-AET02.html#generate-a-table-using-chevron",
    "href": "tables/02-QC-AET02.html#generate-a-table-using-chevron",
    "title": "AET02 - Adverse Events",
    "section": "",
    "text": "Show the code\ntlg_aet02 &lt;- chevron::aet02_main(chevron::syn_data, arm_var = \"ARM\", lbl_overall = \"Overall ARM\")\nhead(tlg_aet02, n = 15)\n\n\n                                                             A: Drug X    B: Placebo   C: Combination   Overall ARM\n                                                               (N=15)       (N=15)         (N=15)         (N=45)   \n———————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nTotal number of patients with at least one adverse event     13 (86.7%)   14 (93.3%)     15 (100%)      42 (93.3%) \nOverall total number of events                                   58           59             99             216    \ncl A.1                                                                                                             \n  Total number of patients with at least one adverse event   7 (46.7%)    6 (40.0%)      10 (66.7%)     23 (51.1%) \n  Total number of events                                         8            11             16             35     \n  dcd A.1.1.1.1                                              3 (20.0%)     1 (6.7%)      6 (40.0%)      10 (22.2%) \n  dcd A.1.1.1.2                                              5 (33.3%)    6 (40.0%)      6 (40.0%)      17 (37.8%) \ncl B.1                                                                                                             \n  Total number of patients with at least one adverse event   5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \n  Total number of events                                         6            6              12             24     \n  dcd B.1.1.1.1                                              5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \ncl B.2                                                                                                             \n  Total number of patients with at least one adverse event   11 (73.3%)   8 (53.3%)      10 (66.7%)     29 (64.4%) \n  Total number of events                                         18           15             20             53     \n  dcd B.2.1.2.1                                              5 (33.3%)    6 (40.0%)      5 (33.3%)      16 (35.6%)",
    "crumbs": [
      "Tables",
      "AET02 - Adverse Events"
    ]
  },
  {
    "objectID": "tables/02-QC-AET02.html#flatten-the-table-into-a-data.frame",
    "href": "tables/02-QC-AET02.html#flatten-the-table-into-a-data.frame",
    "title": "AET02 - Adverse Events",
    "section": "",
    "text": "A {rtables} based output can be flattened into a data.frame using the as_results_df() function from the {rtables} package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package. Setting the add_tbl_str_decimals to FALSE will not return a column with the statistic as a formatted string. We also include a step to remove the “label” attribute for the statistics. The diffdf() function is sensitive to attribute mismatch, so we will remove them (set to NULL) to match the ARD results exactly.\n\nrtables_result &lt;- rtables::as_result_df(tlg_aet02, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nattr(rtables_result$stat, \"label\") &lt;- NULL\n\nrtables_result[1:6, c(\"group2\", \"group2_level\", \"variable\", \"variable_level\", \"stat\")]\n\n\n\n\n\ngroup2\ngroup2_level\nvariable\nvariable_level\nstat\n\n\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n13.0000000\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n0.8666667\n\n\nARM\nA: Drug X\nUSUBJID\nnonunique\n58.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n7.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n0.4666667\n\n\nARM\nA: Drug X\nAEBODSYS\nnonunique\n8.0000000",
    "crumbs": [
      "Tables",
      "AET02 - Adverse Events"
    ]
  },
  {
    "objectID": "tables/02-QC-AET02.html#create-a-comparable-ard",
    "href": "tables/02-QC-AET02.html#create-a-comparable-ard",
    "title": "AET02 - Adverse Events",
    "section": "",
    "text": "In the code below, we perform different data pre-processing for the different ARDs we want to create. Then, we generate separate ARDs using the {cards} package for the different sections of the AET02 table and compare them as subsets. Note: If your table does not have an “overall” column, you can use the ARD creation steps at the bottom of the page using primarily ard_categorical(). ard_hierarchical() is useful here to calculate the statistics for the overall column and allows for better filtering using the “context” column.\n\n# data pre-processing. filter observations with ANL01FL = \"Y\"\nadae &lt;- chevron::syn_data$adae |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\nadsl &lt;- chevron::syn_data$adsl |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\n\n# ----- ARDS -----\nard_result &lt;- ard_stack_hierarchical(\n  data = adae,\n  variables = c(ANL01FL, AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  overall = TRUE,\n  id = USUBJID,\n  statistic = ~ c(\"n\", \"p\")\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns() |&gt;\n  dplyr::filter(context == \"hierarchical\")\n\nard_count_result &lt;-\n  ard_stack_hierarchical_count(\n    data = adae,\n    variables = c(ANL01FL, AEBODSYS),\n    by = ARM,\n    overall = TRUE,\n    denominator = ADSL\n  ) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns() |&gt;\n  dplyr::filter(context == \"hierarchical_count\")",
    "crumbs": [
      "Tables",
      "AET02 - Adverse Events"
    ]
  },
  {
    "objectID": "tables/02-QC-AET02.html#statistics-comparison",
    "href": "tables/02-QC-AET02.html#statistics-comparison",
    "title": "AET02 - Adverse Events",
    "section": "",
    "text": "We’ll modify the rtables result to closely match the ARD result:\n\nRename “group2_level” to “ARM” to match the ARD.\nRemove any columns that aren’t in the ARD result (stat_name is being removed as it is a blank column)\n\n\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::rename(\n    group1_level = group2_level,\n    group1 = group2,\n    group2 = group1,\n    group2_level = group1_level\n  )\n\nhead(rtables_result, n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup2\ngroup2_level\ngroup1\ngroup1_level\nvariable\nvariable_level\nvariable_label\nstat_name\nstat\n\n\n\n\nNA\nNA\nARM\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\nNA\n13.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\nNA\n0.8666667\n\n\nNA\nNA\nARM\nA: Drug X\nUSUBJID\nnonunique\nOverall total number of events\nNA\n58.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\nNA\n7.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\nNA\n0.4666667\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEBODSYS\nnonunique\nTotal number of events\nNA\n8.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\nNA\n3.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\nNA\n0.2000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\nNA\n5.0000000\n\n\nAEBODSYS\ncl A.1\nARM\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\nNA\n0.3333333\n\n\n\n\n\n\nWe can compare the data in subsets to minimize reformatting steps\n\n# subgroup analysis\nrtables_result_sub1 &lt;- rtables_result |&gt;\n  dplyr::filter(variable == \"AEDECOD\") |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\nard_sub1 &lt;- ard_result |&gt;\n  dplyr::filter(variable == \"AEDECOD\") |&gt;\n  dplyr::mutate(\n    group1 = dplyr::case_when(\n      group1 == \"ANL01FL\" ~ \"ARM\",\n      TRUE ~ group1\n    ),\n    group1_level = dplyr::case_when(\n      group1_level == \"Y\" ~ \"Overall ARM\",\n      TRUE ~ group1_level\n    )\n  ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\n\ndiffdf::diffdf(rtables_result_sub1, ard_sub1, keys = c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\nNo issues were found!\n\n\nCompare the second subset\n\nrtables_result_sub2 &lt;- rtables_result |&gt;\n  dplyr::filter(variable %in% c(\"USUBJID\", \"AEBODSYS\") & variable_level != \"nonunique\") |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"stat\")) |&gt;\n  dplyr::rename(\n    variable = group2,\n    variable_level = group2_level\n  ) |&gt;\n  dplyr::mutate(\n    variable = dplyr::coalesce(variable, \"ANL01FL\"),\n    variable_level = dplyr::coalesce(variable_level, \"Y\")\n  )\n\nard_sub2 &lt;- ard_result |&gt;\n  dplyr::filter(variable %in% c(\"ANL01FL\", \"AEBODSYS\")) |&gt;\n  dplyr::mutate(\n    group1 = dplyr::recode(group1, \"ANL01FL\" = \"ARM\"),\n    group1_level = dplyr::recode(group1_level, \"Y\" = \"Overall ARM\"),\n    group1 = dplyr::coalesce(group1, \"ARM\"),\n    group1_level = dplyr::coalesce(group1_level, \"Overall ARM\")\n  ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\ndiffdf::diffdf(rtables_result_sub2, ard_sub2, keys = c(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\"))\n\nNo issues were found!\n\n\nTotal Number of Events (ARD counts data.frame)\n\n# reformat rtables\nrtables_count &lt;- rtables_result |&gt;\n  dplyr::filter(variable_label %in% c(\"Total number of events\", \"Overall total number of events\")) |&gt;\n  dplyr::mutate(\n    group2 = dplyr::case_when(\n      variable_label == \"Overall total number of events\" ~ \"ANL01FL\",\n      TRUE ~ group2\n    ),\n    group2_level = dplyr::case_when(\n      variable_label == \"Overall total number of events\" ~ \"Y\",\n      TRUE ~ group2_level\n    )\n  ) |&gt;\n  dplyr::select(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"stat\")\n\n# reformat ARD result\nard_count_result &lt;- ard_count_result |&gt;\n  dplyr::mutate(\n    group1 = dplyr::coalesce(group1, \"ARM\"),\n    group1_level = dplyr::coalesce(group1_level, \"Overall ARM\"),\n    group1 = dplyr::case_when(\n      group1 == \"ANL01FL\" ~ \"ARM\",\n      TRUE ~ group1\n    ),\n    group1_level = dplyr::case_when(\n      group1_level == \"Y\" ~ \"Overall ARM\",\n      TRUE ~ group1_level\n    )\n  ) |&gt;\n  dplyr::select(\"group1\", \"group1_level\", \"variable\", \"variable_level\", \"stat\") |&gt;\n  dplyr::rename(\n    group2 = variable,\n    group2_level = variable_level\n  )\n\ndiffdf::diffdf(rtables_count, ard_count_result, keys = c(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"stat\"))\n\nNo issues were found!",
    "crumbs": [
      "Tables",
      "AET02 - Adverse Events"
    ]
  },
  {
    "objectID": "other/05-formatting.html",
    "href": "other/05-formatting.html",
    "title": "Formatting Statistics",
    "section": "",
    "text": "When running the QC workflow with ARDs, there may be discrepancies due to rounding methodologies.\nThe {rtables} package uses R’s default “round-to-even” rounding (IEC 60559), while the {cards} package uses the standard rounding scheme (round-half-up: where values exactly halfway between two numbers are rounded up). If you are comparing rounded numbers in your analysis, we recommend applying a formatting function to your ARD statistics to match the {rtables} rounding scheme.\nMake note of the median, and range values in the {rtables} result.\n\nresult &lt;- rtables::basic_table(show_colcounts = TRUE) |&gt;\n  rtables::split_cols_by(var = \"ARM\") |&gt;\n  tern::analyze_vars(\n    vars = \"BMIBL\",\n    .formats = c(\"mean_sd\" = \"xx. / xx.\", \"median\" = \"xx.\", \"range\" = \"(xx., xx.)\")\n  ) |&gt; # rounding stats to whole numbers\n  rtables::build_table(cards::ADSL)\n\nRegistered S3 method overwritten by 'tern':\n  method   from \n  tidy.glm broom\n\nresult_df &lt;- rtables::as_result_df(result, make_ard = T)\n\nresult_df[, c(\"group1_level\", \"stat_name\", \"stat_string\")]\n\n           group1_level stat_name stat_string\n1               Placebo         n          86\n2               Placebo      mean          24\n3               Placebo        sd           4\n4               Placebo    median          23\n5               Placebo       min          15\n6               Placebo       max          33\n7  Xanomeline High Dose         n          84\n8  Xanomeline High Dose      mean          25\n9  Xanomeline High Dose        sd           4\n10 Xanomeline High Dose    median          25\n11 Xanomeline High Dose       min          14\n12 Xanomeline High Dose       max          34\n13  Xanomeline Low Dose         n          83\n14  Xanomeline Low Dose      mean          25\n15  Xanomeline Low Dose        sd           4\n16  Xanomeline Low Dose    median          24\n17  Xanomeline Low Dose       min          18\n18  Xanomeline Low Dose       max          40\n\n\n\nlibrary(cards)\n\nard_formatting &lt;- ard_continuous(ADSL,\n  by = TRT01A, variables = \"BMIBL\",\n  fmt_fn = everything() ~ list(everything() ~ \"xx\")\n) |&gt;\n  apply_fmt_fn() |&gt;\n  dplyr::filter(stat_name %in% c(\"N\", \"mean\", \"sd\", \"min\", \"max\", \"median\"))\n\nard_formatting\n\n{cards} data frame: 18 x 11\n\n\n   group1 group1_level variable stat_name stat_label   stat stat_fmt\n1  TRT01A      Placebo    BMIBL         N          N     86       86\n2  TRT01A      Placebo    BMIBL      mean       Mean 23.636       24\n3  TRT01A      Placebo    BMIBL        sd         SD  3.672        4\n4  TRT01A      Placebo    BMIBL    median     Median   23.4       23\n5  TRT01A      Placebo    BMIBL       min        Min   15.1       15\n6  TRT01A      Placebo    BMIBL       max        Max   33.3       33\n7  TRT01A    Xanomeli…    BMIBL         N          N     84       84\n8  TRT01A    Xanomeli…    BMIBL      mean       Mean 25.348       25\n9  TRT01A    Xanomeli…    BMIBL        sd         SD  4.158        4\n10 TRT01A    Xanomeli…    BMIBL    median     Median   24.8       25\n11 TRT01A    Xanomeli…    BMIBL       min        Min   13.7       14\n12 TRT01A    Xanomeli…    BMIBL       max        Max   34.5       35\n13 TRT01A    Xanomeli…    BMIBL         N          N     83       83\n14 TRT01A    Xanomeli…    BMIBL      mean       Mean 25.063       25\n15 TRT01A    Xanomeli…    BMIBL        sd         SD  4.271        4\n16 TRT01A    Xanomeli…    BMIBL    median     Median   24.3       24\n17 TRT01A    Xanomeli…    BMIBL       min        Min   17.7       18\n18 TRT01A    Xanomeli…    BMIBL       max        Max   40.1       40\n\n\nℹ 4 more variables: context, fmt_fn, warning, error\n\n\nCompare the {rtables} formatted string and the {cards} formatted string\n\ncompare_df &lt;- cbind(\n  ard_formatting[, c(\"group1_level\", \"stat_name\", \"stat\", \"stat_fmt\")],\n  result_df[, \"stat_string\"]\n)\n\ncompare_df[11:15, ]\n\n           group1_level stat_name     stat stat_fmt result_df[, \"stat_string\"]\n11 Xanomeline High Dose       min     13.7       14                         14\n12 Xanomeline High Dose       max     34.5       35                         34\n13  Xanomeline Low Dose         N       83       83                         83\n14  Xanomeline Low Dose      mean 25.06265       25                         25\n15  Xanomeline Low Dose        sd 4.270509        4                          4\n\n\nNotice how the rounded maximum value is “34” for the “Xanomeline High Dose” group using {rtables} while the stat is “35” when rounded in {cards}.\nTo apply the same rounding function as {rtables}, use the fmt_fn parameter in the ARD building function followed by the apply_fmt_fn. You can also apply the update_ard_fmt_fn.\n\nard_iec_rounding &lt;- ard_formatting |&gt;\n  update_ard_fmt_fn(\n    stat_names = \"max\",\n    fmt_fn = round\n  ) |&gt;\n  apply_fmt_fn(replace = T)\n\ncompare_df &lt;- cbind(compare_df, ard_iec_rounding[, \"stat_fmt\"])\n\ncompare_df[11:15, ]\n\n           group1_level stat_name     stat stat_fmt result_df[, \"stat_string\"]\n11 Xanomeline High Dose       min     13.7       14                         14\n12 Xanomeline High Dose       max     34.5       35                         34\n13  Xanomeline Low Dose         N       83       83                         83\n14  Xanomeline Low Dose      mean 25.06265       25                         25\n15  Xanomeline Low Dose        sd 4.270509        4                          4\n   stat_fmt\n11       14\n12       34\n13       83\n14       25\n15        4\n\n\nThe easiest setting would be to set an option at the beginning of your script:\n\noptions(cards.round_type = \"round-to-even\")\n\nThis will update the global environment to apply this rounding method in cards. Below is the same code as the earlier ARD creation steps, but generates the rounded values similar to rtables directly.\n\nard_with_iec_round_option &lt;- ard_continuous(ADSL,\n  by = TRT01A, variables = \"BMIBL\",\n  fmt_fn = everything() ~ list(everything() ~ \"xx\")\n) |&gt;\n  apply_fmt_fn() |&gt;\n  dplyr::filter(stat_name %in% c(\"N\", \"mean\", \"sd\", \"min\", \"max\", \"median\"))\n\nard_with_iec_round_option[11:15, ]\n\n{cards} data frame: 5 x 11\n\n\n  group1 group1_level variable stat_name stat_label   stat stat_fmt\n1 TRT01A    Xanomeli…    BMIBL       min        Min   13.7       14\n2 TRT01A    Xanomeli…    BMIBL       max        Max   34.5       34\n3 TRT01A    Xanomeli…    BMIBL         N          N     83       83\n4 TRT01A    Xanomeli…    BMIBL      mean       Mean 25.063       25\n5 TRT01A    Xanomeli…    BMIBL        sd         SD  4.271        4\n\n\nℹ 4 more variables: context, fmt_fn, warning, error",
    "crumbs": [
      "Other",
      "Formatting Statistics"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "QCing with {cards} and {cardx}",
    "section": "",
    "text": "QCing with {cards} and {cardx}\nThis catalog is meant to demo the use of ARD-centric packages within the Quality Control workflow. Verification of statistics generated with NEST packages (such as: {tern}, {rtables}, {chevron}) can be verified by reproducing the tables using Analysis Results Dataset (ARDs)."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Utilizing the {cards} and {cardx} packages in the QC Workflow",
    "section": "",
    "text": "The current procedure for generating clinical reporting tables employs NEST packages such as {rtables}, {tern} and {chevron}. These packages create complex table structures and generate statistics that should be programmatically compared. This repository provides a collection of Quality Control (QC) workflows for common clinical trial outputs. Statistics calculated using the {rtables} based suite of packages are compared against statistics returned in a Analysis Result Dataset (ARD) using the {cards} and {cardx} packages.\n\n\nThe workflow can be generalized into the following steps:\n\nFlattening the {rtables} output into a data.frame. The data.frame has one line per statistics that appears in the summary table.\nCreate a comparable Analysis Result Dataset (ARD), with a similar structure: one line per statistic.\nWe then modify/reformat each of the data.frames to have the same structure.\nCompare both data.frames to QC each result in the table.\n\n\n\n\n{cards} v.0.5.1.9009 (development)\n{cardx} v.0.2.3\n{rtables} v.0.6.11.9016 (development)\n{tern} v.0.9.7\n{chevron} v.0.2.10",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#qcing-workflow",
    "href": "index.html#qcing-workflow",
    "title": "Utilizing the {cards} and {cardx} packages in the QC Workflow",
    "section": "",
    "text": "The workflow can be generalized into the following steps:\n\nFlattening the {rtables} output into a data.frame. The data.frame has one line per statistics that appears in the summary table.\nCreate a comparable Analysis Result Dataset (ARD), with a similar structure: one line per statistic.\nWe then modify/reformat each of the data.frames to have the same structure.\nCompare both data.frames to QC each result in the table.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "index.html#package-versions",
    "href": "index.html#package-versions",
    "title": "Utilizing the {cards} and {cardx} packages in the QC Workflow",
    "section": "",
    "text": "{cards} v.0.5.1.9009 (development)\n{cardx} v.0.2.3\n{rtables} v.0.6.11.9016 (development)\n{tern} v.0.9.7\n{chevron} v.0.2.10",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "tables/01-QC-DMT01.html",
    "href": "tables/01-QC-DMT01.html",
    "title": "DMT01 - Demographics",
    "section": "",
    "text": "# load libraries\nlibrary(cards)\n\n\n\n\n\nShow the code\n# Create a table using the chevron package\ntlg_dmt01 &lt;- chevron::dmt01_main(chevron::syn_data, summaryvars = c(\"AGE\", \"SEX\"))\nhead(tlg_dmt01, n = 15)\n\n\n              A: Drug X    B: Placebo   C: Combination   All Patients\n                (N=15)       (N=15)         (N=15)          (N=45)   \n—————————————————————————————————————————————————————————————————————\nAge                                                                  \n  n               15           15             15              45     \n  Mean (SD)   31.3 (5.3)   35.1 (9.0)     36.6 (6.4)      34.3 (7.3) \n  Median         31.0         35.0           35.0            34.0    \n  Min - Max    24 - 40      24 - 57        24 - 49         24 - 57   \nSex                                                                  \n  n               15           15             15              45     \n  F           12 (80.0%)   8 (53.3%)      10 (66.7%)      30 (66.7%) \n  M           3 (20.0%)    7 (46.7%)      5 (33.3%)       15 (33.3%) \n\n\n\n\n\nA {rtables} based output can be flattened into a data.frame using the as_results_df() function from the {rtables} package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package.\n\nrtables_result &lt;- rtables::as_result_df(tlg_dmt01, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nrtables_result[1:10, c(\"group1_level\", \"variable\", \"variable_level\", \"stat_name\", \"stat\")]\n\n\n\n\n\ngroup1_level\nvariable\nvariable_level\nstat_name\nstat\n\n\n\n\nA: Drug X\nAGE\nn\nn\n15.000000\n\n\nA: Drug X\nAGE\nmean_sd\nmean\n31.333333\n\n\nA: Drug X\nAGE\nmean_sd\nsd\n5.259911\n\n\nA: Drug X\nAGE\nmedian\nmedian\n31.000000\n\n\nA: Drug X\nAGE\nrange\nmin\n24.000000\n\n\nA: Drug X\nAGE\nrange\nmax\n40.000000\n\n\nA: Drug X\nSEX\nn.n\nn\n15.000000\n\n\nA: Drug X\nSEX\ncount_fraction.F\ncount\n12.000000\n\n\nA: Drug X\nSEX\ncount_fraction.F\np\n0.800000\n\n\nA: Drug X\nSEX\ncount_fraction.M\ncount\n3.000000\n\n\n\n\n\n\n\n\n\nUsing the {cards} package, we stack the functions ard_continuous() for the continuous variables and ard_categorical() for categorical variables. The default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses.\nIf any variable manipulation was done to the data prior to running the {citril}/{chevron}/{tern}/{rtables} commands, we suggest supplying the same data to these ARD functions, or running the same pre-processing steps to your data prior to creating ARDs to ensure variable names/levels match.\n\n# build ARDs that calculate relevant statistics for continuous and categorical variables.\nard_result &lt;-\n  ard_stack(\n    chevron::syn_data$adsl,\n    ard_continuous(\n      variables = c(AGE),\n      statistic = ~ continuous_summary_fns(c(\"N\", \"mean\", \"sd\", \"median\", \"min\", \"max\"))\n    ),\n    ard_categorical(variables = c(SEX), statistic = everything() ~ c(\"n\", \"p\")),\n    ard_missing(variables = c(SEX), statistic = everything() ~ c(\"N_obs\")),\n    .by = \"ARM\",\n    .overall = TRUE\n  ) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\nard_result[1:10, c(\"group1_level\", \"variable\", \"variable_level\", \"stat_name\", \"stat\")]\n\n\n\n\n\ngroup1_level\nvariable\nvariable_level\nstat_name\nstat\n\n\n\n\nA: Drug X\nAGE\nNA\nN\n15.000000\n\n\nA: Drug X\nAGE\nNA\nmean\n31.333333\n\n\nA: Drug X\nAGE\nNA\nsd\n5.259911\n\n\nA: Drug X\nAGE\nNA\nmedian\n31.000000\n\n\nA: Drug X\nAGE\nNA\nmin\n24.000000\n\n\nA: Drug X\nAGE\nNA\nmax\n40.000000\n\n\nA: Drug X\nSEX\nF\nn\n12.000000\n\n\nA: Drug X\nSEX\nF\np\n0.800000\n\n\nA: Drug X\nSEX\nM\nn\n3.000000\n\n\nA: Drug X\nSEX\nM\np\n0.200000\n\n\n\n\n\n\n\n\n\n\n\nIn order to compare the two data.frames programatically, some identifying variables must align to be used as “key columns”. Below are some data wrangling steps used to match the statistics for comparison. Note the {rtables} output:\n\n\nShow the code\ntail(rtables_result)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nvariable\nvariable_level\nvariable_label\nstat_name\nstat\n\n\n\n\n39\nARM\nAll Patients\nAGE\nrange\nMin - Max\nmax\n57.0000000\n\n\n40\nARM\nAll Patients\nSEX\nn.n\nn\nn\n45.0000000\n\n\n41\nARM\nAll Patients\nSEX\ncount_fraction.F\nF\ncount\n30.0000000\n\n\n42\nARM\nAll Patients\nSEX\ncount_fraction.F\nF\np\n0.6666667\n\n\n43\nARM\nAll Patients\nSEX\ncount_fraction.M\nM\ncount\n15.0000000\n\n\n44\nARM\nAll Patients\nSEX\ncount_fraction.M\nM\np\n0.3333333\n\n\n\n\n\n\nThe variable_level leads with the statistic name, followed by \".\" and then the actual level that matches the variable_level in the ARD object. We will mutate the level to match the ARD object. Similarly, the total number of observations for a group is labelled \"N\" in the ARD object, while it is named \"n\" in the {rtables} object. The following manipulations are completed below:\n\nSet the variable_level to NA in the {rtables} result for a continuous data summary (as variable levels don’t apply and is NULL in the ARD object).\nRemove the stat_name (ie. “count”) before the variable level.\nConvert the “n”:“N” and “count”:“n”.\nRemove columns we know won’t be in the ARD data.frame for simplicity (ie.variable_label)\n\n\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::mutate(\n    variable_level = dplyr::case_when(\n      variable == \"AGE\" & variable_level %in% c(\"mean_sd\", \"median\", \"range\", \"n\") ~ NA_character_,\n      TRUE ~ variable_level\n    ),\n    variable_level = sub(\"^[^.]*\\\\.\", \"\", variable_level), # use variable_label\n    stat_name = dplyr::recode(stat_name, \"n\" = \"N\", \"count\" = \"n\")\n  ) |&gt;\n  dplyr::select(-c(\"variable_label\"))\n\nhead(rtables_result, n = 10)\n\n\n\n\n\ngroup1\ngroup1_level\nvariable\nvariable_level\nstat_name\nstat\n\n\n\n\nARM\nA: Drug X\nAGE\nNA\nN\n15.000000\n\n\nARM\nA: Drug X\nAGE\nNA\nmean\n31.333333\n\n\nARM\nA: Drug X\nAGE\nNA\nsd\n5.259911\n\n\nARM\nA: Drug X\nAGE\nNA\nmedian\n31.000000\n\n\nARM\nA: Drug X\nAGE\nNA\nmin\n24.000000\n\n\nARM\nA: Drug X\nAGE\nNA\nmax\n40.000000\n\n\nARM\nA: Drug X\nSEX\nn\nN\n15.000000\n\n\nARM\nA: Drug X\nSEX\nF\nn\n12.000000\n\n\nARM\nA: Drug X\nSEX\nF\np\n0.800000\n\n\nARM\nA: Drug X\nSEX\nM\nn\n3.000000\n\n\n\n\n\n\n\n\n\nA reformatting step is necessary for the ARD output to complete the comparison. We’ll add the string “ARM” to any NULL observations in the group1 column to match the {rtables} result and add the “All Patients” label to the group1_level.\n\nard_result &lt;- ard_result |&gt;\n  dplyr::mutate(\n    group1 = dplyr::coalesce(group1, \"ARM\"),\n    group1_level = dplyr::coalesce(group1_level, \"All Patients\"),\n    stat_name = dplyr::recode(stat_name, \"N_obs\" = \"N\")\n  ) |&gt;\n  dplyr::select(c(\"group1_level\", \"group1\", \"variable\", \"variable_level\", \"stat_name\", \"stat\"))\n\nNote that the ARD result is larger than the {rtables} result. When using ard_stack with a listed by variable, a univariate analysis is run for that variable. Here, it is \"ARM\". We can remove those statistics as they are not in the rtables_result.\n\nard_result &lt;- ard_result |&gt;\n  dplyr::filter(\n    !((variable == \"ARM\")) | is.na(variable_level)\n  ) |&gt;\n  dplyr::mutate(variable_level = dplyr::if_else(stat_name == \"N\" & is.na(variable_level) & variable != \"AGE\", \"n\", variable_level))\n\n\n\n\nHere we propose using the {diffdf} package to compare the statistics produced by the two table engines. {diffdf} is designed to compare two data.frames and report any differences/inconsistencies to the user.\n\ndiffdf::diffdf(rtables_result,\n  ard_result,\n  keys = c(\"group1_level\", \"group1\", \"variable\", \"variable_level\", \"stat_name\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\nIf there are any differences you wish to explore, the above code can be assigned to an object which will collect the reported differences (comparison based on key columns, see dplyr::anti_join()).",
    "crumbs": [
      "Tables",
      "DMT01 - Demographics"
    ]
  },
  {
    "objectID": "tables/01-QC-DMT01.html#generate-a-table-using-chevron",
    "href": "tables/01-QC-DMT01.html#generate-a-table-using-chevron",
    "title": "DMT01 - Demographics",
    "section": "",
    "text": "Show the code\n# Create a table using the chevron package\ntlg_dmt01 &lt;- chevron::dmt01_main(chevron::syn_data, summaryvars = c(\"AGE\", \"SEX\"))\nhead(tlg_dmt01, n = 15)\n\n\n              A: Drug X    B: Placebo   C: Combination   All Patients\n                (N=15)       (N=15)         (N=15)          (N=45)   \n—————————————————————————————————————————————————————————————————————\nAge                                                                  \n  n               15           15             15              45     \n  Mean (SD)   31.3 (5.3)   35.1 (9.0)     36.6 (6.4)      34.3 (7.3) \n  Median         31.0         35.0           35.0            34.0    \n  Min - Max    24 - 40      24 - 57        24 - 49         24 - 57   \nSex                                                                  \n  n               15           15             15              45     \n  F           12 (80.0%)   8 (53.3%)      10 (66.7%)      30 (66.7%) \n  M           3 (20.0%)    7 (46.7%)      5 (33.3%)       15 (33.3%)",
    "crumbs": [
      "Tables",
      "DMT01 - Demographics"
    ]
  },
  {
    "objectID": "tables/01-QC-DMT01.html#flatten-the-table-into-a-data.frame",
    "href": "tables/01-QC-DMT01.html#flatten-the-table-into-a-data.frame",
    "title": "DMT01 - Demographics",
    "section": "",
    "text": "A {rtables} based output can be flattened into a data.frame using the as_results_df() function from the {rtables} package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package.\n\nrtables_result &lt;- rtables::as_result_df(tlg_dmt01, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nrtables_result[1:10, c(\"group1_level\", \"variable\", \"variable_level\", \"stat_name\", \"stat\")]\n\n\n\n\n\ngroup1_level\nvariable\nvariable_level\nstat_name\nstat\n\n\n\n\nA: Drug X\nAGE\nn\nn\n15.000000\n\n\nA: Drug X\nAGE\nmean_sd\nmean\n31.333333\n\n\nA: Drug X\nAGE\nmean_sd\nsd\n5.259911\n\n\nA: Drug X\nAGE\nmedian\nmedian\n31.000000\n\n\nA: Drug X\nAGE\nrange\nmin\n24.000000\n\n\nA: Drug X\nAGE\nrange\nmax\n40.000000\n\n\nA: Drug X\nSEX\nn.n\nn\n15.000000\n\n\nA: Drug X\nSEX\ncount_fraction.F\ncount\n12.000000\n\n\nA: Drug X\nSEX\ncount_fraction.F\np\n0.800000\n\n\nA: Drug X\nSEX\ncount_fraction.M\ncount\n3.000000",
    "crumbs": [
      "Tables",
      "DMT01 - Demographics"
    ]
  },
  {
    "objectID": "tables/01-QC-DMT01.html#create-a-comparable-ard",
    "href": "tables/01-QC-DMT01.html#create-a-comparable-ard",
    "title": "DMT01 - Demographics",
    "section": "",
    "text": "Using the {cards} package, we stack the functions ard_continuous() for the continuous variables and ard_categorical() for categorical variables. The default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses.\nIf any variable manipulation was done to the data prior to running the {citril}/{chevron}/{tern}/{rtables} commands, we suggest supplying the same data to these ARD functions, or running the same pre-processing steps to your data prior to creating ARDs to ensure variable names/levels match.\n\n# build ARDs that calculate relevant statistics for continuous and categorical variables.\nard_result &lt;-\n  ard_stack(\n    chevron::syn_data$adsl,\n    ard_continuous(\n      variables = c(AGE),\n      statistic = ~ continuous_summary_fns(c(\"N\", \"mean\", \"sd\", \"median\", \"min\", \"max\"))\n    ),\n    ard_categorical(variables = c(SEX), statistic = everything() ~ c(\"n\", \"p\")),\n    ard_missing(variables = c(SEX), statistic = everything() ~ c(\"N_obs\")),\n    .by = \"ARM\",\n    .overall = TRUE\n  ) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\nard_result[1:10, c(\"group1_level\", \"variable\", \"variable_level\", \"stat_name\", \"stat\")]\n\n\n\n\n\ngroup1_level\nvariable\nvariable_level\nstat_name\nstat\n\n\n\n\nA: Drug X\nAGE\nNA\nN\n15.000000\n\n\nA: Drug X\nAGE\nNA\nmean\n31.333333\n\n\nA: Drug X\nAGE\nNA\nsd\n5.259911\n\n\nA: Drug X\nAGE\nNA\nmedian\n31.000000\n\n\nA: Drug X\nAGE\nNA\nmin\n24.000000\n\n\nA: Drug X\nAGE\nNA\nmax\n40.000000\n\n\nA: Drug X\nSEX\nF\nn\n12.000000\n\n\nA: Drug X\nSEX\nF\np\n0.800000\n\n\nA: Drug X\nSEX\nM\nn\n3.000000\n\n\nA: Drug X\nSEX\nM\np\n0.200000",
    "crumbs": [
      "Tables",
      "DMT01 - Demographics"
    ]
  },
  {
    "objectID": "tables/01-QC-DMT01.html#statistics-comparison",
    "href": "tables/01-QC-DMT01.html#statistics-comparison",
    "title": "DMT01 - Demographics",
    "section": "",
    "text": "In order to compare the two data.frames programatically, some identifying variables must align to be used as “key columns”. Below are some data wrangling steps used to match the statistics for comparison. Note the {rtables} output:\n\n\nShow the code\ntail(rtables_result)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nvariable\nvariable_level\nvariable_label\nstat_name\nstat\n\n\n\n\n39\nARM\nAll Patients\nAGE\nrange\nMin - Max\nmax\n57.0000000\n\n\n40\nARM\nAll Patients\nSEX\nn.n\nn\nn\n45.0000000\n\n\n41\nARM\nAll Patients\nSEX\ncount_fraction.F\nF\ncount\n30.0000000\n\n\n42\nARM\nAll Patients\nSEX\ncount_fraction.F\nF\np\n0.6666667\n\n\n43\nARM\nAll Patients\nSEX\ncount_fraction.M\nM\ncount\n15.0000000\n\n\n44\nARM\nAll Patients\nSEX\ncount_fraction.M\nM\np\n0.3333333\n\n\n\n\n\n\nThe variable_level leads with the statistic name, followed by \".\" and then the actual level that matches the variable_level in the ARD object. We will mutate the level to match the ARD object. Similarly, the total number of observations for a group is labelled \"N\" in the ARD object, while it is named \"n\" in the {rtables} object. The following manipulations are completed below:\n\nSet the variable_level to NA in the {rtables} result for a continuous data summary (as variable levels don’t apply and is NULL in the ARD object).\nRemove the stat_name (ie. “count”) before the variable level.\nConvert the “n”:“N” and “count”:“n”.\nRemove columns we know won’t be in the ARD data.frame for simplicity (ie.variable_label)\n\n\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::mutate(\n    variable_level = dplyr::case_when(\n      variable == \"AGE\" & variable_level %in% c(\"mean_sd\", \"median\", \"range\", \"n\") ~ NA_character_,\n      TRUE ~ variable_level\n    ),\n    variable_level = sub(\"^[^.]*\\\\.\", \"\", variable_level), # use variable_label\n    stat_name = dplyr::recode(stat_name, \"n\" = \"N\", \"count\" = \"n\")\n  ) |&gt;\n  dplyr::select(-c(\"variable_label\"))\n\nhead(rtables_result, n = 10)\n\n\n\n\n\ngroup1\ngroup1_level\nvariable\nvariable_level\nstat_name\nstat\n\n\n\n\nARM\nA: Drug X\nAGE\nNA\nN\n15.000000\n\n\nARM\nA: Drug X\nAGE\nNA\nmean\n31.333333\n\n\nARM\nA: Drug X\nAGE\nNA\nsd\n5.259911\n\n\nARM\nA: Drug X\nAGE\nNA\nmedian\n31.000000\n\n\nARM\nA: Drug X\nAGE\nNA\nmin\n24.000000\n\n\nARM\nA: Drug X\nAGE\nNA\nmax\n40.000000\n\n\nARM\nA: Drug X\nSEX\nn\nN\n15.000000\n\n\nARM\nA: Drug X\nSEX\nF\nn\n12.000000\n\n\nARM\nA: Drug X\nSEX\nF\np\n0.800000\n\n\nARM\nA: Drug X\nSEX\nM\nn\n3.000000\n\n\n\n\n\n\n\n\n\nA reformatting step is necessary for the ARD output to complete the comparison. We’ll add the string “ARM” to any NULL observations in the group1 column to match the {rtables} result and add the “All Patients” label to the group1_level.\n\nard_result &lt;- ard_result |&gt;\n  dplyr::mutate(\n    group1 = dplyr::coalesce(group1, \"ARM\"),\n    group1_level = dplyr::coalesce(group1_level, \"All Patients\"),\n    stat_name = dplyr::recode(stat_name, \"N_obs\" = \"N\")\n  ) |&gt;\n  dplyr::select(c(\"group1_level\", \"group1\", \"variable\", \"variable_level\", \"stat_name\", \"stat\"))\n\nNote that the ARD result is larger than the {rtables} result. When using ard_stack with a listed by variable, a univariate analysis is run for that variable. Here, it is \"ARM\". We can remove those statistics as they are not in the rtables_result.\n\nard_result &lt;- ard_result |&gt;\n  dplyr::filter(\n    !((variable == \"ARM\")) | is.na(variable_level)\n  ) |&gt;\n  dplyr::mutate(variable_level = dplyr::if_else(stat_name == \"N\" & is.na(variable_level) & variable != \"AGE\", \"n\", variable_level))\n\n\n\n\nHere we propose using the {diffdf} package to compare the statistics produced by the two table engines. {diffdf} is designed to compare two data.frames and report any differences/inconsistencies to the user.\n\ndiffdf::diffdf(rtables_result,\n  ard_result,\n  keys = c(\"group1_level\", \"group1\", \"variable\", \"variable_level\", \"stat_name\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\nIf there are any differences you wish to explore, the above code can be assigned to an object which will collect the reported differences (comparison based on key columns, see dplyr::anti_join()).",
    "crumbs": [
      "Tables",
      "DMT01 - Demographics"
    ]
  },
  {
    "objectID": "tables/03-QC-LBT01.html",
    "href": "tables/03-QC-LBT01.html",
    "title": "LBT01 - Laboratory Results",
    "section": "",
    "text": "# load libraries\nlibrary(cards)\n\n\n\nUsing the lbt01_main() function from the {chevron} package to generate a Lab Results Table. We’ll add an overall column to walk through the QCing steps if your table has one.\n\n\nShow the code\n# Create a table using the chevron package\ntlg_lbt01 &lt;- chevron::lbt01_main(chevron::syn_data, lbl_overall = \"Overall ARM\")\nhead(tlg_lbt01, n = 15)\n\n\n                                                          A: Drug X                                        B: Placebo                                      C: Combination                                     Overall ARM                  \n                                       Analysis Value    Absolute Change from Baseline   Analysis Value    Absolute Change from Baseline   Analysis Value   Absolute Change from Baseline   Analysis Value    Absolute Change from Baseline\n                                           (N=15)                   (N=15)                   (N=15)                   (N=15)                   (N=15)                  (N=15)                   (N=45)                   (N=45)            \n———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nAlanine Aminotransferase Measurement                                                                                                                                                                                                       \n  SCREENING                                                                                                                                                                                                                                \n    n                                        15                        0                       15                        0                       15                       0                       45                        0              \n    Mean (SD)                          15.746 (7.382)               NE (NE)              21.443 (9.716)               NE (NE)              21.234 (6.314)              NE (NE)              19.474 (8.196)               NE (NE)           \n    Median                                 15.466                     NE                     23.567                     NE                     22.179                    NE                     21.295                     NE              \n    Min - Max                           3.29 - 29.00                NE - NE               1.89 - 33.95                NE - NE               9.64 - 31.59               NE - NE               1.89 - 33.95                NE - NE           \n  BASELINE                                                                                                                                                                                                                                 \n    n                                        15                                                15                                                15                                               45                                       \n    Mean (SD)                          18.655 (12.455)                                   16.835 (11.080)                                   22.385 (9.452)                                   19.292 (11.059)                                \n    Median                                 16.040                                            17.453                                            25.250                                           18.691                                     \n    Min - Max                           2.43 - 44.06                                      1.48 - 31.99                                      0.57 - 37.23                                     0.57 - 44.06                                  \n  WEEK 1 DAY 8                                                                                                                                                                                                                             \n    n                                        15                       15                       15                       15                       15                      15                       45                       45              \n    Mean (SD)                          16.308 (10.850)          -2.348 (17.558)          22.055 (7.537)           5.220 (16.359)           19.574 (9.876)          -2.811 (10.902)          19.313 (9.604)           0.020 (15.327)        \n    Median                                 14.664                   -5.369                   22.476                    7.252                   19.425                  -0.995                   19.198                   -0.995            \n\n\n\n\n\nA {rtables} based output can be flattened into a data frame using the as_results_df() function from the {rtables package}. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards}/{cardx} package. Setting the add_tbl_str_decimals to FALSE will not return a column with the statistic as a formatted string.\n\nrtables_result &lt;- rtables::as_result_df(tlg_lbt01, make_ard = TRUE, add_tbl_str_decimals = FALSE)\n\n\n\n\nUsing the ard_continuous function, we will compute the lab results statistics. Notice how there are multiple variables specified by strata: observations will be grouped in that sequence before calculating the statistics for the variables listed in variables. The strata parameter calculates statistics for observed levels only. If your table keeps unobserved levels during calculation, the strata parameter should be replaced with the by parameter (more detail described in the documentation here).\nTo calculate the statistics for the overall column, the code should look similar to the prior calculation with the “ARM” variable removed from the strata (or by) parameter (indicating the data is not stratified by “ARM”).\nWe’ll keep the stats for the overall column in a separate data.frame to generalize this workflow.\n\nadlb &lt;- chevron::syn_data$adlb\n\nard_result &lt;- ard_continuous(adlb,\n  strata = c(PARAMCD, AVISIT, ACTARM),\n  variables = c(AVAL, CHG),\n  statistic =\n    list(everything() ~ continuous_summary_fns(c(\"N\", \"mean\", \"sd\", \"median\", \"min\", \"max\")))\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n\n# calculate overall statistics\nard_overall &lt;- ard_continuous(adlb,\n  strata = c(PARAMCD, AVISIT), # note arm var is removed\n  variables = c(AVAL, CHG),\n  statistic =\n    list(everything() ~ continuous_summary_fns(c(\"N\", \"mean\", \"sd\", \"median\", \"min\", \"max\")))\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n\n\n\n\n\nSome reformatting is required to ensure the resulting data.frames are compatible. Most of the reformatting is adjusting the column names to match that of the ARD result.\n\nRename group3 and group3_level, to group1 and group1_level (contains “ARM” values).\nRename group1 and group1_level, to group2 and group2_level (contains “PARAMCD” values).\nRename group2 and group2_level, to group3 and group3_level (contains “AVISIT” values).\nRecode stat n value to N to match ARD\nSelect columns relevant to comparison\n\nWe’ll also separate the statistics related to the overall ARM to match the ard_overall object.\n\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::mutate(\n    stat_name = dplyr::recode(stat_name, \"n\" = \"N\"),\n    group4_level = dplyr::recode(group4_level,\n      \"Analysis Value\" = \"AVAL\",\n      \"Absolute Change from Baseline\" = \"CHG\"\n    )\n  ) |&gt;\n  dplyr::rename(\n    variable = group4_level,\n    # giving a dummy name for this column so it doesn't interfere with the column renaming\n    val = variable\n  ) |&gt;\n  dplyr::select(c(group1, group1_level, group2, group2_level, group3, group3_level, variable, stat_name, stat))\n\nrtables_result_overall &lt;- rtables_result |&gt;\n  dplyr::filter(group3_level == \"Overall ARM\") |&gt;\n  dplyr::select(c(group1, group1_level, group2, group2_level, variable, stat_name, stat))\n\n# remove the overall observations from the results df\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::filter(group3_level != \"Overall ARM\")\n\n\n\n\nWe’ll also need some format adjustments for the ARD object.\n\nSelect columns relevant to comparison\nConvert any NaN stats to NA to match {rtables}\n\n\nard_result &lt;- ard_result |&gt;\n  dplyr::select(c(group1, group1_level, group2, group2_level, group3, group3_level, variable, stat_name, stat)) |&gt;\n  dplyr::mutate(\n    stat = dplyr::recode(stat, `NaN` = NA_real_)\n  )\n\n# to the overall ard_result, rename the cols to match the rtables df\n\nard_overall &lt;- ard_overall |&gt;\n  dplyr::mutate(\n    # group1 = \"ACTARM\",\n    # group1_level = \"Overall ARM\",\n    stat = dplyr::recode(stat, `NaN` = NA_real_)\n  ) |&gt;\n  dplyr::select(c(group1, group1_level, group2, group2_level, variable, stat_name, stat))\n\nhead(ard_result, n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\ngroup2\ngroup2_level\ngroup3\ngroup3_level\nvariable\nstat_name\nstat\n\n\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nN\n15.000000\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nmean\n15.745666\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nsd\n7.381973\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nmedian\n15.466383\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nmin\n3.292476\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nmax\n29.000254\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nCHG\nN\n0.000000\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nCHG\nmean\nNA\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nCHG\nsd\nNA\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nCHG\nmedian\nNA\n\n\n\n\n\n\n\n\n\nUse the {diffdf} package to compare the results.\n\ndiffdf::diffdf(ard_result,\n  rtables_result,\n  keys = c(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"group3\", \"group3_level\", \"variable\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\n\ndiffdf::diffdf(ard_overall,\n  rtables_result_overall,\n  keys = c(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"variable\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!",
    "crumbs": [
      "Tables",
      "LBT01 - Laboratory Results"
    ]
  },
  {
    "objectID": "tables/03-QC-LBT01.html#generate-a-table-using-chevron",
    "href": "tables/03-QC-LBT01.html#generate-a-table-using-chevron",
    "title": "LBT01 - Laboratory Results",
    "section": "",
    "text": "Using the lbt01_main() function from the {chevron} package to generate a Lab Results Table. We’ll add an overall column to walk through the QCing steps if your table has one.\n\n\nShow the code\n# Create a table using the chevron package\ntlg_lbt01 &lt;- chevron::lbt01_main(chevron::syn_data, lbl_overall = \"Overall ARM\")\nhead(tlg_lbt01, n = 15)\n\n\n                                                          A: Drug X                                        B: Placebo                                      C: Combination                                     Overall ARM                  \n                                       Analysis Value    Absolute Change from Baseline   Analysis Value    Absolute Change from Baseline   Analysis Value   Absolute Change from Baseline   Analysis Value    Absolute Change from Baseline\n                                           (N=15)                   (N=15)                   (N=15)                   (N=15)                   (N=15)                  (N=15)                   (N=45)                   (N=45)            \n———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nAlanine Aminotransferase Measurement                                                                                                                                                                                                       \n  SCREENING                                                                                                                                                                                                                                \n    n                                        15                        0                       15                        0                       15                       0                       45                        0              \n    Mean (SD)                          15.746 (7.382)               NE (NE)              21.443 (9.716)               NE (NE)              21.234 (6.314)              NE (NE)              19.474 (8.196)               NE (NE)           \n    Median                                 15.466                     NE                     23.567                     NE                     22.179                    NE                     21.295                     NE              \n    Min - Max                           3.29 - 29.00                NE - NE               1.89 - 33.95                NE - NE               9.64 - 31.59               NE - NE               1.89 - 33.95                NE - NE           \n  BASELINE                                                                                                                                                                                                                                 \n    n                                        15                                                15                                                15                                               45                                       \n    Mean (SD)                          18.655 (12.455)                                   16.835 (11.080)                                   22.385 (9.452)                                   19.292 (11.059)                                \n    Median                                 16.040                                            17.453                                            25.250                                           18.691                                     \n    Min - Max                           2.43 - 44.06                                      1.48 - 31.99                                      0.57 - 37.23                                     0.57 - 44.06                                  \n  WEEK 1 DAY 8                                                                                                                                                                                                                             \n    n                                        15                       15                       15                       15                       15                      15                       45                       45              \n    Mean (SD)                          16.308 (10.850)          -2.348 (17.558)          22.055 (7.537)           5.220 (16.359)           19.574 (9.876)          -2.811 (10.902)          19.313 (9.604)           0.020 (15.327)        \n    Median                                 14.664                   -5.369                   22.476                    7.252                   19.425                  -0.995                   19.198                   -0.995",
    "crumbs": [
      "Tables",
      "LBT01 - Laboratory Results"
    ]
  },
  {
    "objectID": "tables/03-QC-LBT01.html#flatten-the-table-into-a-data.frame",
    "href": "tables/03-QC-LBT01.html#flatten-the-table-into-a-data.frame",
    "title": "LBT01 - Laboratory Results",
    "section": "",
    "text": "A {rtables} based output can be flattened into a data frame using the as_results_df() function from the {rtables package}. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards}/{cardx} package. Setting the add_tbl_str_decimals to FALSE will not return a column with the statistic as a formatted string.\n\nrtables_result &lt;- rtables::as_result_df(tlg_lbt01, make_ard = TRUE, add_tbl_str_decimals = FALSE)",
    "crumbs": [
      "Tables",
      "LBT01 - Laboratory Results"
    ]
  },
  {
    "objectID": "tables/03-QC-LBT01.html#create-a-comparable-ard",
    "href": "tables/03-QC-LBT01.html#create-a-comparable-ard",
    "title": "LBT01 - Laboratory Results",
    "section": "",
    "text": "Using the ard_continuous function, we will compute the lab results statistics. Notice how there are multiple variables specified by strata: observations will be grouped in that sequence before calculating the statistics for the variables listed in variables. The strata parameter calculates statistics for observed levels only. If your table keeps unobserved levels during calculation, the strata parameter should be replaced with the by parameter (more detail described in the documentation here).\nTo calculate the statistics for the overall column, the code should look similar to the prior calculation with the “ARM” variable removed from the strata (or by) parameter (indicating the data is not stratified by “ARM”).\nWe’ll keep the stats for the overall column in a separate data.frame to generalize this workflow.\n\nadlb &lt;- chevron::syn_data$adlb\n\nard_result &lt;- ard_continuous(adlb,\n  strata = c(PARAMCD, AVISIT, ACTARM),\n  variables = c(AVAL, CHG),\n  statistic =\n    list(everything() ~ continuous_summary_fns(c(\"N\", \"mean\", \"sd\", \"median\", \"min\", \"max\")))\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()\n\n\n# calculate overall statistics\nard_overall &lt;- ard_continuous(adlb,\n  strata = c(PARAMCD, AVISIT), # note arm var is removed\n  variables = c(AVAL, CHG),\n  statistic =\n    list(everything() ~ continuous_summary_fns(c(\"N\", \"mean\", \"sd\", \"median\", \"min\", \"max\")))\n) |&gt;\n  apply_fmt_fn() |&gt;\n  unlist_ard_columns()",
    "crumbs": [
      "Tables",
      "LBT01 - Laboratory Results"
    ]
  },
  {
    "objectID": "tables/03-QC-LBT01.html#statistics-comparison",
    "href": "tables/03-QC-LBT01.html#statistics-comparison",
    "title": "LBT01 - Laboratory Results",
    "section": "",
    "text": "Some reformatting is required to ensure the resulting data.frames are compatible. Most of the reformatting is adjusting the column names to match that of the ARD result.\n\nRename group3 and group3_level, to group1 and group1_level (contains “ARM” values).\nRename group1 and group1_level, to group2 and group2_level (contains “PARAMCD” values).\nRename group2 and group2_level, to group3 and group3_level (contains “AVISIT” values).\nRecode stat n value to N to match ARD\nSelect columns relevant to comparison\n\nWe’ll also separate the statistics related to the overall ARM to match the ard_overall object.\n\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::mutate(\n    stat_name = dplyr::recode(stat_name, \"n\" = \"N\"),\n    group4_level = dplyr::recode(group4_level,\n      \"Analysis Value\" = \"AVAL\",\n      \"Absolute Change from Baseline\" = \"CHG\"\n    )\n  ) |&gt;\n  dplyr::rename(\n    variable = group4_level,\n    # giving a dummy name for this column so it doesn't interfere with the column renaming\n    val = variable\n  ) |&gt;\n  dplyr::select(c(group1, group1_level, group2, group2_level, group3, group3_level, variable, stat_name, stat))\n\nrtables_result_overall &lt;- rtables_result |&gt;\n  dplyr::filter(group3_level == \"Overall ARM\") |&gt;\n  dplyr::select(c(group1, group1_level, group2, group2_level, variable, stat_name, stat))\n\n# remove the overall observations from the results df\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::filter(group3_level != \"Overall ARM\")\n\n\n\n\nWe’ll also need some format adjustments for the ARD object.\n\nSelect columns relevant to comparison\nConvert any NaN stats to NA to match {rtables}\n\n\nard_result &lt;- ard_result |&gt;\n  dplyr::select(c(group1, group1_level, group2, group2_level, group3, group3_level, variable, stat_name, stat)) |&gt;\n  dplyr::mutate(\n    stat = dplyr::recode(stat, `NaN` = NA_real_)\n  )\n\n# to the overall ard_result, rename the cols to match the rtables df\n\nard_overall &lt;- ard_overall |&gt;\n  dplyr::mutate(\n    # group1 = \"ACTARM\",\n    # group1_level = \"Overall ARM\",\n    stat = dplyr::recode(stat, `NaN` = NA_real_)\n  ) |&gt;\n  dplyr::select(c(group1, group1_level, group2, group2_level, variable, stat_name, stat))\n\nhead(ard_result, n = 10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\ngroup2\ngroup2_level\ngroup3\ngroup3_level\nvariable\nstat_name\nstat\n\n\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nN\n15.000000\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nmean\n15.745666\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nsd\n7.381973\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nmedian\n15.466383\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nmin\n3.292476\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nAVAL\nmax\n29.000254\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nCHG\nN\n0.000000\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nCHG\nmean\nNA\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nCHG\nsd\nNA\n\n\nPARAMCD\nALT\nAVISIT\nSCREENING\nACTARM\nA: Drug X\nCHG\nmedian\nNA\n\n\n\n\n\n\n\n\n\nUse the {diffdf} package to compare the results.\n\ndiffdf::diffdf(ard_result,\n  rtables_result,\n  keys = c(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"group3\", \"group3_level\", \"variable\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!\n\n\n\n\n\n\ndiffdf::diffdf(ard_overall,\n  rtables_result_overall,\n  keys = c(\"group1\", \"group1_level\", \"group2\", \"group2_level\", \"variable\", \"stat_name\", \"stat\"),\n  suppress_warnings = TRUE\n)\n\nNo issues were found!",
    "crumbs": [
      "Tables",
      "LBT01 - Laboratory Results"
    ]
  }
]