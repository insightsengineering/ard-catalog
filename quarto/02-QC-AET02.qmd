---
title: "QCing Adverse Events (AET02)"
editor: source
format: 
  html:
    page-layout: full
    code-fold: true
    code-summary: "Show the code"
    code-overflow: scroll 
    df-print: kable
---
## Adverse Events (AET02) QC Workflow

### 1. Generate a table using {chevron}
```{r}
#| message: false
#| code-summary: "Show the code"
library(chevron)

tlg_aet02 <- chevron:: aet02_main(syn_data, arm_var = "ARM", lbl_overall = "Overall ARM")
head(tlg_aet02, n=15) #truncated preview
```

### 2. Flatten the table into a data.frame
A {rtables} based output can be flattened into a data.frame using the `as_results_df()` function from the {rtables} package. The `make_ard` argument set to `TRUE`, will format the data similar to the output generated by the {cards} package. Setting the `add_tbl_str_decimals` to `FALSE` will not return a column with the statistic as a formatted string.
We also include a step to remove the "label" attribute for the statistics. The `diffdf()` function is sensitive to attribute mismatch, so we will remove them (set to `NULL`) to match the ARD results exactly.

```{r}
#| message: false
#| code-fold: false
#| code-summary: "Show the code"
rtables_result <- rtables::as_result_df(tlg_aet02, make_ard = TRUE, add_tbl_str_decimals = FALSE)
attr(rtables_result$stat, "label") <- NULL

rtables_result[1:6, -c(1:2, 7,8)]
```


### 3. Create a comparable ARD

In the code below, we perform different data pre-processing for the different ARDs we want to create. 
Then, we generate separate ARDs using the {cards} package for the different sections of the AET02 table and compare them as subsets.
Note: If your table does not have an "overall" column, you can use the ARD creation steps at the bottom of the page using primarily `ard_categorical()`. `ard_hierarchical()` is useful here to calculate the statistics for the overall column and allows for better filtering using the "context" column.
```{r}
#| code-summary: "Show the code"
#| code-fold: false
#| message: false

library(cards)

# data pre-processing. filter observations with ANL01FL = "Y"
adae <- syn_data$adae |>
  dplyr::filter(ANL01FL == "Y")
adsl <- syn_data$adsl |>
  dplyr::filter(ANL01FL == "Y")

# Keep only 1 record per patient
adae_one_sub <- adae |> 
  dplyr::filter(!duplicated(adae[c("USUBJID")]))

# Keep only 1 record per patient for each AEBODSYS
adae_one_sub_aebod <- adae |> 
  dplyr::filter(!duplicated(adae[c("USUBJID", "AEBODSYS")]))

# ----- ARDS -----
# Total number of patients with at least one adverse event  
tot_pat_ae <- ard_stack_hierarchical(
  data = adae_one_sub,
  id = "USUBJID",
  variables = c(SAFFL),
  by = c(ARM),
  denominator = adsl,
  statistic = everything() ~ c("n", "p"),
  overall = TRUE) |>
  dplyr::filter(context == "hierarchical") |> ## removing univariate analysis
  shuffle_ard(trim = FALSE) |>
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_))) # convert list to numeric

# Total number of AEs 
tot_ae <- ard_stack_hierarchical_count(
  data = adae,
  variables = c(SAFFL),
  denominator = adsl,
  by = ARM,
  overall = TRUE) |>
  dplyr::filter(context == "hierarchical_count") |> ## removing univariate analysis
  dplyr::mutate(
    # convert lists to character and numeric
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)), 
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))

# Total number of patients with at least one adverse event within each AEBODSYS
tot_pat_ae_aebod <- ard_stack_hierarchical(
  id = "USUBJID",
  data = adae_one_sub_aebod,
  variables = c(AEBODSYS),
  by = c(ARM),
  overall = TRUE,
  denominator = adsl,
  statistic = everything() ~ c("n", "p")) |>
  dplyr::filter(context == "hierarchical") |>  ## removing univariate analysis
  dplyr::mutate(
    # convert lists to character and numeric
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)),
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)))

# Total number of AEs for each AEBODSYS
tot_ae_aebod <- ard_stack_hierarchical_count(
  data = adae,
  variables = c(AEBODSYS),
  by = c(ARM),
  denominator = adsl,
  overall = TRUE) |> 
  shuffle_ard(trim = FALSE) |>
  dplyr::filter(context == "hierarchical_count") |> ## removing univariate analysis
  dplyr::mutate(
    # convert lists to character and numeric
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)),
    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)))

# Count and Percent for each AEDECOD within each AEBODSYS
ae_n_p_aedecod <- ard_stack_hierarchical(
  data = adae,
  id = "USUBJID",
  variables = c(AEBODSYS, AEDECOD),
  by = c(ARM),
  denominator = adsl,
  statistic = everything() ~ c("n", "p"),
  overall = TRUE) |> 
  shuffle_ard(trim = FALSE) |> 
  dplyr::filter(context == "hierarchical", 
                variable == "AEDECOD") |> 
  dplyr::mutate(
    # convert list numeric
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))
```


### 4. Statistics Comparison

We'll modify the rtables result to closely match the ARD result:

  1. Rename "group2_level" to ARM
  2. Remove any columns that aren't in the ARD result (stat_name is being removed as it is a blank column)

```{r}
rtables_result <- rtables_result |>
  dplyr::rename(ARM = group2_level)|>
  dplyr::select(-c("stat_name", "group2"))

head(rtables_result, n=10)
```


Because the subsets of AET02 table are already separated in the ARDs, we can subset the {rtables} result equally to create a clean comparison.

#### Total number of patients with at least one adverse event
```{r}
#| code-summary: "Show the code"
#| code-fold: false
tot_pat_ae <- tot_pat_ae |> dplyr::select(c("ARM", "stat"))

tot_pat_ae_rtables <- rtables_result |>
  dplyr::filter(variable_label == "Total number of patients with at least one adverse event" & variable == "USUBJID") |>
  dplyr::select("ARM", "stat")

diffdf::diffdf(tot_pat_ae, tot_pat_ae_rtables, keys = c("ARM", "stat"))
```
#### Total number of adverse events
```{r}
#| code-summary: "Show the code"
#| code-fold: false
tot_ae <- tot_ae |>   
  dplyr::rename(ARM = group1_level) |>
  dplyr::mutate(ARM = ifelse(is.na(ARM), "Overall ARM", ARM))|>
  dplyr::select(c("ARM", "stat"))

tot_ae_rtables <- rtables_result |>
  dplyr::filter(variable == "USUBJID" & variable_label == "Overall total number of events")|>
  dplyr::select("ARM", "stat")

diffdf::diffdf(tot_ae, tot_ae_rtables, keys = c("ARM", "stat"))
```


#### Total number of patients with at least one adverse event within each AEBODSYS
```{r}
#| code-summary: "Show the code"
#| code-fold: false
tot_pat_ae_aebod <- tot_pat_ae_aebod |>
  dplyr::rename(ARM = group1_level) |>
  dplyr::mutate(ARM = ifelse(is.na(ARM), "Overall ARM", ARM))|>
  dplyr::select(c("ARM", "variable", "variable_level", "stat")) |>
  dplyr::mutate(
    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)),
    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)))

tot_pat_ae_aebod_rtables <- rtables_result |>
   dplyr::filter(variable_level == "unique" & variable_label == "Total number of patients with at least one adverse event" & group1 == "AEBODSYS") |>
  dplyr::select(c("ARM", "variable", "stat", "group1_level")) |>
  dplyr::rename(variable_level = group1_level)

diffdf::diffdf(tot_pat_ae_aebod, tot_pat_ae_aebod_rtables, keys = c("ARM", "variable_level", "stat"))
```

#### Total number of AEs for each AEBODSYS
```{r}
#| code-summary: "Show the code"
#| code-fold: false
tot_ae_aebod <- tot_ae_aebod |>
  dplyr::select(c("ARM", "label", "stat"))

tot_ae_aebod_rtables <- rtables_result |>
  dplyr::filter(variable_label == "Total number of events") |>
    dplyr::rename(label = group1_level) |>
  dplyr::select(c("ARM", "label", "stat"))

diffdf::diffdf(tot_ae_aebod, tot_ae_aebod_rtables, keys = c("ARM", "label", "stat"))
```

#### Count and Percent for each AEDECOD within each AEBODSYS
```{r}
#| code-summary: "Show the code"
#| code-fold: false
ae_n_p_aedecod <- ae_n_p_aedecod |>
  dplyr::mutate(ARM = ifelse(is.na(ARM), "Overall ARM", ARM)) |>
  dplyr::select(c("ARM", "label", "stat"))

ae_n_p_aedecod_rtables <- rtables_result |>
  dplyr::filter(variable == "AEDECOD") |>
    dplyr::rename(label = variable_label) |>
  dplyr::select(c("ARM", "label", "stat"))

diffdf::diffdf(ae_n_p_aedecod, ae_n_p_aedecod_rtables, keys = c("ARM", "label", "stat"))
```

### ARD creation with no overall column

```{r}
#| code-summary: "Show the code"
#| code-fold: false
#| message: false
library(cards)

# data pre-processing. filter observations with ANL01FL = "Y"
adae <- syn_data$adae |>
  dplyr::filter(ANL01FL == "Y")
adsl <- syn_data$adsl |>
  dplyr::filter(ANL01FL == "Y")

# Keep only 1 record per patient
adae_one_sub <- adae |> 
  dplyr::filter(!duplicated(adae[c("USUBJID")]))

# Keep only 1 record per patient for each AEBODSYS
adae_one_sub_aebod <- adae |> 
  dplyr::filter(!duplicated(adae[c("USUBJID", "AEBODSYS")]))

# ----- ARDS -----
# Total number of patients with at least one adverse event  ## removing univariate analysis
tot_pat_ae <- ard_categorical(
  data = adae_one_sub,
  variables = c(SAFFL),
  by = c(ARM),
  denominator = adsl,
  statistic = everything() ~ c("n", "p")) |>
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))

# Total number of AEs 
tot_ae <- ard_categorical(
  data = adae,
  variables = c(SAFFL),
  denominator = adsl,
  by = ARM,
  statistic = everything() ~ c("n")) |>
  dplyr::mutate(
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)),
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))

# Total number of patients with at least one adverse event within each AEBODSYS
tot_pat_ae_aebod <- ard_categorical(
  data = adae_one_sub_aebod,
  variables = c(AEBODSYS),
  by = c(ARM),
  denominator = adsl,
  statistic = everything() ~ c("n", "p")) |>
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)),
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)))

# Total number of AEs for each AEBODSYS
tot_ae_aebod <- ard_categorical(
  data = adae,
  variables = c(AEBODSYS),
  by = c(ARM),
  denominator = adsl,
  statistic = everything() ~ c("n")) |> 
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))
  
# Count and Percent for each AEDECOD within each AEBODSYS
ae_n_p_aedecod <- ard_stack_hierarchical(
  data = adae,
  id = "USUBJID",
  variables = c(AEBODSYS, AEDECOD),
  by = c(ARM),
  denominator = adsl,
  statistic = everything() ~ c("n", "p")) |> 
  dplyr::filter(context == "hierarchical", 
                variable == "AEDECOD") |>
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))
```
