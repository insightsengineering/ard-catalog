---
title: "QCing Adverse Events (AET02)"
editor: source
format: 
  html:
    page-layout: full
    code-fold: true
    code-summary: "Show the code"
    code-overflow: scroll 
    df-print: kable
---
## Adverse Events (AET02) QC Workflow

```{r}
#| message: false
#| code-summary: "Show the code"
# load libraries
library(cards)
```


### 1. Generate a table using {chevron}

```{r}
#| message: false
#| code-summary: "Show the code"
tlg_aet02 <- chevron::aet02_main(chevron::syn_data, arm_var = "ARM", lbl_overall = "Overall ARM")
head(tlg_aet02, n = 15)
```

### 2. Flatten the table into a data.frame
A {rtables} based output can be flattened into a data.frame using the `as_results_df()` function from the {rtables} package. The `make_ard` argument set to `TRUE`, will format the data similar to the output generated by the {cards} package. Setting the `add_tbl_str_decimals` to `FALSE` will not return a column with the statistic as a formatted string.
We also include a step to remove the "label" attribute for the statistics. The `diffdf()` function is sensitive to attribute mismatch, so we will remove them (set to `NULL`) to match the ARD results exactly.

```{r}
#| message: false
#| code-fold: false
#| code-summary: "Show the code"
rtables_result <- rtables::as_result_df(tlg_aet02, make_ard = TRUE, add_tbl_str_decimals = FALSE)
attr(rtables_result$stat, "label") <- NULL

rtables_result[1:6, c("group2", "group2_level", "variable", "variable_level", "stat")]
```


### 3. Create a comparable ARD

In the code below, we perform different data pre-processing for the different ARDs we want to create. 
Then, we generate separate ARDs using the {cards} package for the different sections of the AET02 table and compare them as subsets.
Note: If your table does not have an "overall" column, you can use the ARD creation steps at the bottom of the page using primarily `ard_categorical()`. `ard_hierarchical()` is useful here to calculate the statistics for the overall column and allows for better filtering using the "context" column.

```{r}
#| code-summary: "Show the code"
#| code-fold: false
#| message: false
# data pre-processing. filter observations with ANL01FL = "Y"
adae <- chevron::syn_data$adae |>
  dplyr::filter(ANL01FL == "Y")
adsl <- chevron::syn_data$adsl |>
  dplyr::filter(ANL01FL == "Y")

# ----- ARDS -----
ard_result <- ard_stack_hierarchical(
  data = adae,
  variables = c(ANL01FL, AEBODSYS, AEDECOD),
  by = c(ARM),
  denominator = adsl,
  overall = TRUE,
  id = USUBJID,
  statistic = ~ c("n", "p")
) |>
  dplyr::filter(context == "hierarchical")

ard_count_result <-
  ard_stack_hierarchical_count(
    data = adae,
    variables = c(ANL01FL, AEBODSYS),
    by = ARM,
    overall = TRUE,
    denominator = ADSL
  ) |>
  dplyr::filter(context == "hierarchical_count")
```

### 4. Statistics Comparison

We'll modify the rtables result to closely match the ARD result:

  1. Rename "group2_level" to "ARM" to match the ARD.
  2. Remove any columns that aren't in the ARD result (stat_name is being removed as it is a blank column)

```{r}
#| message: false
#| code-summary: "Show the code"
rtables_result <- rtables_result |>
  dplyr::rename(
    group1_level = group2_level,
    group1 = group2,
    group2 = group1,
    group2_level = group1_level
  )

head(rtables_result, n = 10)
```

We can compare the data in subsets to minimize reformatting steps
```{r}
#| message: false
#| code-summary: "Show the code"
# subgroup analysis
rtables_result_sub1 <- rtables_result |>
  dplyr::filter(variable == "AEDECOD") |>
  dplyr::select(c("group1", "group1_level", "variable", "variable_level", "stat"))

ard_sub1 <- ard_result |>
  dplyr::filter(variable == "AEDECOD") |>
  dplyr::mutate(
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA)),
    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA)),
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_real_)),
    group1 = dplyr::case_when(
      group1 == "ANL01FL" ~ "ARM",
      TRUE ~ group1
    ),
    group1_level = dplyr::case_when(
      group1_level == "Y" ~ "Overall ARM",
      TRUE ~ group1_level
    )
  ) |>
  dplyr::select(c("group1", "group1_level", "variable", "variable_level", "stat"))


diffdf::diffdf(rtables_result_sub1, ard_sub1, keys = c("group1", "group1_level", "variable", "variable_level", "stat"))
```

Compare the second subset

```{r}
#| message: false
#| code-summary: "Show the code"
rtables_result_sub2 <- rtables_result |>
  dplyr::filter(variable %in% c("USUBJID", "AEBODSYS") & variable_level != "nonunique") |>
  dplyr::select(c("group1", "group1_level", "group2", "group2_level", "stat")) |>
  dplyr::rename(
    variable = group2,
    variable_level = group2_level
  ) |>
  dplyr::mutate(
    variable = dplyr::coalesce(variable, "ANL01FL"),
    variable_level = dplyr::coalesce(variable_level, "Y")
  )


ard_sub2 <- ard_result |>
  dplyr::filter(variable %in% c("ANL01FL", "AEBODSYS")) |>
  dplyr::mutate(
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA)),
    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA)),
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_real_)),
    group1 = dplyr::recode(group1, "ANL01FL" = "ARM"),
    group1_level = dplyr::recode(group1_level, "Y" = "Overall ARM"),
    group1 = dplyr::coalesce(group1, "ARM"),
    group1_level = dplyr::coalesce(group1_level, "Overall ARM")
  ) |>
  dplyr::select(c("group1", "group1_level", "variable", "variable_level", "stat"))

diffdf::diffdf(rtables_result_sub2, ard_sub2, keys = c("group1", "group1_level", "variable", "variable_level", "stat"))
```

Total Number of Events (ARD counts data.frame)

```{r}
#| message: false
#| code-summary: "Show the code"
# reformat rtables
rtables_count <- rtables_result |>
  dplyr::filter(variable_label %in% c("Total number of events", "Overall total number of events")) |>
  dplyr::mutate(
    group2 = dplyr::case_when(
      variable_label == "Overall total number of events" ~ "ANL01FL",
      TRUE ~ group2
    ),
    group2_level = dplyr::case_when(
      variable_label == "Overall total number of events" ~ "Y",
      TRUE ~ group2_level
    )
  ) |>
  dplyr::select("group1", "group1_level", "group2", "group2_level", "stat")

# reformat ARD result
ard_count_result <- ard_count_result |>
  dplyr::mutate(
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA)),
    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA)),
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_real_)),
    group1 = dplyr::coalesce(group1, "ARM"),
    group1_level = dplyr::coalesce(group1_level, "Overall ARM"),
    group1 = dplyr::case_when(
      group1 == "ANL01FL" ~ "ARM",
      TRUE ~ group1
    ),
    group1_level = dplyr::case_when(
      group1_level == "Y" ~ "Overall ARM",
      TRUE ~ group1_level
    )
  ) |>
  dplyr::select("group1", "group1_level", "variable", "variable_level", "stat") |>
  dplyr::rename(
    group2 = variable,
    group2_level = variable_level
  )

diffdf::diffdf(rtables_count, ard_count_result, keys = c("group1", "group1_level", "group2", "group2_level", "stat"))
```
