---
title: "QCing Adverse Events (AET02)"
editor: source
format: 
  html:
    page-layout: full
    code-fold: true
    code-summary: "Show the code"
---

## Adverse Events (AET02) QC Workflow

#### 1. Generate a table using {chevron}
```{r}
library(chevron)

tlg_aet02 <- chevron:: aet02_main(syn_data, arm_var = "ARM", lbl_overall = "Overall ARM")
tlg_aet02

```


#### 2. Flatten the table into a data.frame

A rtables based output can be flattened into a data frame using the `as_results_df()` function from the rtables package. The `make_ard` argument set to `TRUE`, will format the data similar to the output generated by the {cards} package.

```{r}
rtables_result <- rtables::as_result_df(tlg_aet02, make_ard = TRUE, expand_colnames = TRUE)
result[1:6, -c(1:3)]
```


## Calculaing AET02 statistics using the {cards} package

In this example below we perform different data pre-processing for the different ARDs we want to create. 
We then generate separate ARDs for the different sections of the AET02 table and then merge them all together. 

```{r}
#| code-summary: "Show the code"

library(cards)
library(dplyr)

# some data pre-processing
adae <- syn_data$adae
adsl <- syn_data$adsl

# Keep only 1 record per patient
adae_one_sub <- adae %>% 
  filter(!duplicated(adae[c("USUBJID")]))

# Keep only 1 record per patient for each AEBODSYS
adae_one_sub_aebod <- adae %>% 
  filter(!duplicated(adae[c("USUBJID", "AEBODSYS")]))


# ----- ARDS -----
# Total number of patients with at least one adverse event  ## removing univariate analysis
tot_pat_ae <- ard_stack_hierarchical(
  data = adae_one_sub,
  id = "USUBJID",
  variables = c(SAFFL),
  by = c(ARM),
  denominator = adsl,
  statistic = everything() ~ c("n", "p"),
  overall = TRUE) |>
  dplyr::filter(context == "hierarchical") |>
  shuffle_ard(trim = FALSE) |>
  dplyr::mutate(tbl_name = 'tot_pat_ae') |>
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))

# Total number of AEs 
tot_ae <- ard_stack_hierarchical_count(
  data = adae,
  variables = c(SAFFL),
  denominator = adsl,
  by = ARM,
  overall = TRUE) |>
  mutate(tbl_name = 'tot_ae') |>
  dplyr::filter(context == "hierarchical_count") |>
  dplyr::mutate(
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)),
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))

# Total number of patients with at least one adverse event within each AEBODSYS
tot_pat_ae_aebod <- ard_stack_hierarchical(
  id = "USUBJID",
  data = adae_one_sub_aebod,
  variables = c(AEBODSYS),
  by = c(ARM),
  overall = TRUE,
  denominator = adsl,
  statistic = everything() ~ c("n", "p")) |>
  dplyr::mutate(tbl_name = 'tot_pat_ae_aebod') |>
  dplyr::filter(context == "hierarchical") |>
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)),
    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)))

# Total number of AEs for each AEBODSYS
tot_ae_aebod <- ard_stack_hierarchical_count(
  data = adae,
  variables = c(AEBODSYS),
  by = c(ARM),
  denominator = adsl,
  overall = TRUE) |> 
  shuffle_ard(trim = FALSE) |>
  dplyr::mutate(tbl_name = 'tot_ae_aebod') |>
  dplyr::filter(context == "hierarchical_count") |>
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)),
    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)))
  

# Count and Percent for each AEDECOD within each AEBODSYS
ae_n_p_aedecod <- ard_stack_hierarchical(
  data = adae,
  id = "USUBJID",
  variables = c(AEBODSYS, AEDECOD),
  by = c(ARM),
  denominator = adsl,
  statistic = everything() ~ c("n", "p"),
  overall = TRUE) |> 
  shuffle_ard(trim = FALSE) |> 
  dplyr::filter(context == "hierarchical", 
                variable == "AEDECOD") |>
  dplyr::mutate(tbl_name = 'ae_n_p_aedecod ')|>
  dplyr::mutate(
    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) > 0, as.numeric(.x[[1]]), NA_character_)))

# bind the ARDs
final_aet02_ard <- dplyr::bind_rows(tot_pat_ae, tot_ae, tot_pat_ae_aebod, tot_ae_aebod, ae_n_p_aedecod) |> 
  as.data.frame() |> 
  dplyr::select(-c(context, warning, error))


final_aet02_ard
```


### Compare Programatically

We'll modify the rtables result to closely match the ARD result:
1. Rename "group1" and "group1_level"
2. Remove any columns that aren't in the ARD result (stat_name is being removed as it is a blank column)

```{r}

rtables_result <- rtables_result %>%
  dplyr::rename(ARM = group2_level)%>%
  dplyr::select(-c("stat_name", "group2", "stat_string"))
  
```


Because the subsets of AET02 table are already separated in the ARDs, we can subset the {rtables} result equally to create a clean comparison.

```{r}
# Total number of patients with at least one adverse event
tot_pat_ae <- tot_pat_ae |> dplyr::select(c("ARM", "stat"))

tot_pat_ae_rtables <- rtables_result %>%
  filter(variable_label == "Total number of patients with at least one adverse event" & variable == "USUBJID") |>
  dplyr::select("ARM", "stat")
attr(tot_pat_ae_rtables$stat, "label") <- NULL

diffdf(tot_pat_ae, tot_pat_ae_rtables, keys = c("ARM", "stat"))


```
Total number of adverse events
```{r}
tot_ae <- tot_ae |>   
  dplyr::rename(ARM = group1_level) |>
  dplyr::mutate(ARM = ifelse(is.na(ARM), "Overall ARM", ARM))|>
  dplyr::select(c("ARM", "stat"))

tot_ae_rtables <- rtables_result %>%
  filter(variable == "USUBJID" & variable_label == "Overall total number of events")|>
  dplyr::select("ARM", "stat")
attr(tot_ae_rtables$stat, "label") <- NULL

diffdf(tot_ae, tot_ae_rtables, keys = c("ARM", "stat"))

```


Total number of patients with at least one adverse event within each AEBODSYS
```{r}

tot_pat_ae_aebod <- tot_pat_ae_aebod %>%
  dplyr::rename(ARM = group1_level) |>
  dplyr::mutate(ARM = ifelse(is.na(ARM), "Overall ARM", ARM))|>
  dplyr::select(c("ARM", "variable", "variable_level", "stat")) |>
  dplyr::mutate(
    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)),
    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)))

tot_pat_ae_aebod_rtables <- rtables_result %>%
   filter(variable_level == "unique" & variable_label == "Total number of patients with at least one adverse event" & group1 == "AEBODSYS") |>
  dplyr::select(c("ARM", "variable", "stat", "group1_level")) |>
  dplyr::rename(variable_level = group1_level)
attr(tot_pat_ae_aebod_rtables$stat, "label") <- NULL

diffdf(tot_pat_ae_aebod, tot_pat_ae_aebod_rtables, keys = c("ARM", "variable_level", "stat"))


```

Total number of AEs for each AEBODSYS
```{r}

tot_ae_aebod <- tot_ae_aebod |>
  dplyr::select(c("ARM", "label", "stat"))

tot_ae_aebod_rtables <- rtables_result %>%
  filter(variable_label == "Total number of events") |>
    dplyr::rename(label = group1_level) |>
  dplyr::select(c("ARM", "label", "stat"))

attr(tot_ae_aebod_rtables$stat, "label") <- NULL

diffdf(tot_ae_aebod, tot_ae_aebod_rtables, keys = c("ARM", "label", "stat"))


```
Count and Percent for each AEDECOD within each AEBODSYS

```{r}

ae_n_p_aedecod <- ae_n_p_aedecod |>
  dplyr::mutate(ARM = ifelse(is.na(ARM), "Overall ARM", ARM)) |>
  dplyr::select(c("ARM", "label", "stat"))

ae_n_p_aedecod_rtables <- rtables_result %>%
  filter(variable == "AEDECOD") |>
    dplyr::rename(label = variable_label) |>
  dplyr::select(c("ARM", "label", "stat"))

attr(ae_n_p_aedecod_rtables$stat, "label") <- NULL

diffdf(ae_n_p_aedecod, ae_n_p_aedecod_rtables, keys = c("ARM", "label", "stat"))
```


