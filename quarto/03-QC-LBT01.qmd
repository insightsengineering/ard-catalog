---
title: "QCing Laboratory Test Results and Change from Baseline by Visit (LBT01)"
editor: source
format: 
  html:
    page-layout: full
    code-fold: true
    code-summary: "Show the code"
    code-overflow: scroll 
    df-print: kable
---

## Laboratory Test Results and Change from Baseline by Visit (LBT01) QC Workflow

#### 1. Generate a table using {chevron}

```{r}
#| message: false
#| code-summary: "Show the code"
library(chevron)

# Create a table using the chevron package 
tlg_lbt01 <- chevron::lbt01_main(syn_data, lbl_overall = "Overall ARM")
tlg_lbt01

```

#### 2. Flatten the table into a data.frame

A rtables based output can be flattened into a data frame using the `as_results_df()` function from the rtables package. The `make_ard` argument set to `TRUE`, will format the data similar to the output generated by the {cards} package.

```{r}
rtables_results <- rtables::as_result_df(tlg_lbt01, make_ard = TRUE, expand_colnames = TRUE)
results[1:6, -c(1:3)]
```

#### 3. Create a comparable ARD

Using the {cards} package, we stack the functions `ard_continuous()` for the continuous variables and `ard_categorical()` for categorical variables. The default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses.

If any variable manipulation was done to the data prior to running the citril/chevron/tern/rtables commands, we suggest supplying the same data to these ARD functions, or running the same pre-processing steps to your data prior to creating ARDs to ensure variable names/levels match.

Note: when a 'by' variable is specified in the  `ard_stack()` call, a univariate tabluation is returned. We will have to remove those obervations later in the workflow to create a 1:1 match. 

```{r}
#| code-fold: false
#| code-summary: "Show the code"
library(cards)
library(tern)
library(dplyr)

adsl <- syn_data$adsl
adlb <- syn_data$adlb

# Ensure character variables are converted to factors and empty strings and NAs are explicit missing levels.
adsl <- df_explicit_na(adsl)
adlb <- df_explicit_na(adlb) %>%
  filter(ANL01FL == "Y")

ard_result <- ard_continuous(adlb, 
                             by = c(ARM, PARAM, AVISIT), 
                             variables = c(AVAL, CHG), 
                             statistic = list(everything() ~ continuous_summary_fns(c("N", "mean", "sd", "median", "min", "max"))))

### How to calculate overall?
```

### Statistics comparison

#### 1. rtables reformat


##### 2. ARD reformat


#### 3. Compare programmatically

