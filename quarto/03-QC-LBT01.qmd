---
title: "QCing Laboratory Test Results and Change from Baseline by Visit (LBT01)"
editor: source
format: 
  html:
    page-layout: full
    code-fold: true
    code-summary: "Show the code"
    code-overflow: scroll 
    df-print: kable
---

## Laboratory Test Results and Change from Baseline by Visit (LBT01) QC Workflow
```{r}
#| message: false
#| code-summary: "Show the code"
# load libraries
library(cards)
```

### 1. Generate a table using {chevron}

Using the `lbt01_main()` function from the {chevron} package to generate a Lab Results Table. We'll add an overall column to walk through the QCing steps if your table has one.

```{r}
#| message: false
#| code-summary: "Show the code"

# Create a table using the chevron package
tlg_lbt01 <- chevron::lbt01_main(chevron::syn_data, lbl_overall = "Overall ARM")
head(tlg_lbt01, n = 15)
```

### 2. Flatten the table into a data.frame

A {rtables} based output can be flattened into a data frame using the `as_results_df()` function from the {rtables package}. The `make_ard` argument set to `TRUE`, will format the data similar to the output generated by the {cards}/{cardx} package. 
Setting the `add_tbl_str_decimals` to `FALSE` will not return a column with the statistic as a formatted string.

```{r, warning=FALSE}
#| code-fold: false
rtables_result <- rtables::as_result_df(tlg_lbt01, make_ard = TRUE, add_tbl_str_decimals = FALSE)
```

### 3. Create a comparable ARD

Using the `ard_continuous` function, we will compute the lab results statistics. 
Notice how there are multiple variables specified by `strata`: observations will be grouped in that sequence before calculating the statistics for the variables listed in `variables`. 
The `strata` parameter calculates statistics for observed levels only. If your table keeps unobserved levels during calculation, the `strata` parameter should be replaced with the `by` parameter (more detail described in the documentation [here](https://insightsengineering.github.io/cards/latest-tag/reference/ard_continuous.html#arg-by-strata)).

To calculate the statistics for the overall column, the code should look similar to the prior calculation with the "ARM" variable removed from the `strata` (or `by`) parameter (indicating the data is not stratified by "ARM").

We'll keep the stats for the overall column in a separate data.frame to generalize this workflow.

```{r}
#| code-fold: false
#| message: false
adlb <- chevron::syn_data$adlb

ard_result <- ard_continuous(adlb,
  strata = c(ACTARM, PARAMCD, AVISIT),
  variables = c(AVAL, CHG),
  statistic =
    list(everything() ~ continuous_summary_fns(c("N", "mean", "sd", "median", "min", "max")))
) |>
  apply_fmt_fn() |>
  unlist_ard_columns()


# calculate overall statistics
ard_overall <- ard_continuous(adlb,
  strata = c(PARAMCD, AVISIT), # note arm var is removed
  variables = c(AVAL, CHG),
  statistic =
    list(everything() ~ continuous_summary_fns(c("N", "mean", "sd", "median", "min", "max")))
) |>
  apply_fmt_fn() |>
  unlist_ard_columns()
```

### 4.Statistics comparison

#### A. {rtables} reformat
Some reformatting is required to ensure the resulting data.frames are compatible. Most of the reformatting is adjusting the column names to match that of the ARD result.

  1.  Rename `group3` and `group3_level`, to `group1` and `group1_level` (contains "ARM" values).
  2.  Rename `group1` and `group1_level`, to `group2` and `group2_level` (contains "PARAMCD" values).
  3.  Rename `group2` and `group2_level`, to  `group3` and `group3_level` (contains "AVISIT" values).
  4.  Recode `stat` `n` value to `N` to match ARD
  5.  Select columns relevant to comparison

We'll also separate the statistics related to the overall ARM to match the `ard_overall` object.

```{r}
#| code-fold: false
rtables_result <- rtables_result |>
  dplyr::mutate(
    stat_name = dplyr::recode(stat_name, "n" = "N"),
    group4_level = dplyr::recode(group4_level,
      "Analysis Value" = "AVAL",
      "Absolute Change from Baseline" = "CHG"
    )
  ) |>
  dplyr::rename(
    group1 = group3,
    group1_level = group3_level,
    group2 = group1,
    group2_level = group1_level,
    group3 = group2,
    group3_level = group2_level,
    variable = group4_level,
    # giving a dummy name for this column so it doesn't interfere with the column renaming
    val = variable
  ) |>
  dplyr::select(c(group1, group1_level, group2, group2_level, group3, group3_level, variable, stat_name, stat))

rtables_result_overall <- rtables_result |>
  dplyr::filter(group1_level == "Overall ARM")

# remove the overall observations from the results df
rtables_result <- rtables_result |>
  dplyr::filter(group1_level != "Overall ARM")
```

##### B. ARD reformat
We'll also need some format adjustments for the ARD object.

1.  Select columns relevant to comparison
2.  Convert any `NaN` stats to `NA` to match {rtables}

```{r}
#| code-fold: false
ard_result <- ard_result |>
  dplyr::select(c(group1, group1_level, group2, group2_level, group3, group3_level, variable, stat_name, stat)) |>
  dplyr::mutate(
    stat = dplyr::recode(stat, `NaN` = NA_real_)
  )

# to the overall ard_result, rename the cols to match the rtables df

ard_overall <- ard_overall |>
  dplyr::rename(
    group2 = group1,
    group2_level = group1_level,
    group3 = group2,
    group3_level = group2_level
  ) |>
  dplyr::mutate(
    group1 = "ACTARM",
    group1_level = "Overall ARM",
    stat = dplyr::recode(stat, `NaN` = NA_real_)
  ) |>
  dplyr::select(c(group1, group1_level, group2, group2_level, group3, group3_level, variable, stat_name, stat))

head(ard_result, n = 10)
```

#### C. Compare programmatically
  Use the {diffdf} package to compare the results.

```{r, eval=TRUE}
#| code-fold: false
diffdf::diffdf(ard_result,
  rtables_result,
  keys = c("group1", "group1_level", "group2", "group2_level", "group3", "group3_level", "variable", "stat_name", "stat"),
  suppress_warnings = TRUE
)
```

##### Compare the overall_arm

```{r, eval=TRUE}
#| code-fold: false
diffdf::diffdf(ard_overall,
  rtables_result_overall,
  keys = c("group1", "group1_level", "group2", "group2_level", "group3", "group3_level", "variable", "stat_name", "stat"),
  suppress_warnings = TRUE
)
```
