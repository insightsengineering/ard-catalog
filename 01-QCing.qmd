---
title: "QCing tables with ARDs"
editor: source
format: 
  html:
    page-layout: full
    code-fold: true
    code-summary: "Show the code"
    code-overflow: scroll 
    df-print: kable
---

### QCing rtables

You are likely familiar with the r packages developed by NEST for [generating tables and graphs](https://insightsengineering.github.io/tlg-catalog/stable/).  
A common practice to ensure quality control (QC) of the calculated statistics is double programming - submitting the *same data* in a *different programmatic source* to ensure the results align. 
Historically, these tables are compared to outputs produced by SAS statistical software.
Here, we offer an alternative using the Analysis Results Datasets (ARDs). The CDISC Analysis Results Standard aims to facilitate automation, reproducibility, reusability, and traceability of analysis results data (ARD). 
The {cards} and {cardx} packages can be used to create these analysis datasets.

### Recommended QCing workflow

Below we provide an example workflow for QCing tables.

#### Generate a table using {chevron}

```{r}
#| message: false
#| code-summary: "Show the code"
library(chevron)

# Create a table using the chevron package 
dmt01 <- chevron::run(dmt01, syn_data)
dmt01

```

#### Flatten the table into a data.frame

A rtables based output can be flattened into a data frame using the `as_results_df()` function from the rtables package. The `make_ard` argument set to `TRUE`, will format the data similar to the output generated by the {cards} package. 

```{r}
results <- rtables::as_result_df(dmt01, make_ard = TRUE)
results[1:6, -c(1:3)]
```

#### Create a comparable ARD
Using the {cards} package, we stack the functions `ard_continuous()` for the continuous variables and `ard_categorical()` for categorical variables. 
The default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses. 

```{r}
library(cards)

# build ARDs that calculate relevant statistics for continuous and categorical variables.

ards <- ard_stack(syn_data$adsl, ard_continuous(variables = c(AGE), statistic = ~ continuous_summary_fns(c("N", "mean", "sd", "median", "min", "max"))
  ),
                 ard_categorical(variables = c(AGEGR1, SEX, ETHNIC, RACE)),
                 .by = "ARM",
                 .overall = TRUE)

ards [1:6, -c(1,9:11)]
```

#### Visualize using a side-by-side comparison

Viewing both the ARD result and the flattened data frame, it is clear the results are comparable. With this dataframe structure - values can be programmatically compared as well (`all.equal()`, `identical()`, etc.)

```{r}
t1 <- results[1:6, -c(1:3,6,8)]
t2 <- ards [1:6, -c(1,4:6,9:11)]
knitr::kable(list(t1, t2))
```


