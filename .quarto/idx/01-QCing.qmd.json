{"title":"QCing tables with ARDs","markdown":{"yaml":{"title":"QCing tables with ARDs","editor":"source","format":{"html":{"page-layout":"full","code-fold":true,"code-summary":"Show the code","code-overflow":"scroll","df-print":"kable"}}},"headingText":"QCing rtables","containsRefs":false,"markdown":"\n\n\nYou are likely familiar with the r packages developed by NEST for [generating tables and graphs](https://insightsengineering.github.io/tlg-catalog/stable/).  \nA common practice to ensure quality control (QC) of the calculated statistics is double programming - submitting the *same data* in a *different programmatic source* to ensure the results align. \nHistorically, these tables are compared to outputs produced by SAS statistical software.\nHere, we offer an alternative using the Analysis Results Datasets (ARDs). The CDISC Analysis Results Standard aims to facilitate automation, reproducibility, reusability, and traceability of analysis results data (ARD). \nThe {cards} and {cardx} packages can be used to create these analysis datasets.\n\n### Recommended QCing workflow\n\nBelow we provide an example workflow for QCing tables.\n\n#### Generate a table using {chevron}\n\n```{r}\n#| message: false\n#| code-summary: \"Show the code\"\nlibrary(chevron)\n\n# Create a table using the chevron package \ndmt01 <- chevron::run(dmt01, syn_data)\ndmt01\n\n```\n\n#### Flatten the table into a data.frame\n\nA rtables based output can be flattened into a data frame using the `as_results_df()` function from the rtables package. The `make_ard` argument set to `TRUE`, will format the data similar to the output generated by the {cards} package. \n\n```{r}\nresults <- rtables::as_result_df(dmt01, make_ard = TRUE)\nresults\n```\n\n#### Create a comparable ARD\nUsing the {cards} package, we stack the functions `ard_continuous()` for the continuous variables and `ard_categorical()` for categorical variables. \nThe default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses. \n\n```{r}\nlibrary(cards)\n\n# build ARDs that calculate relevant statistics for continuous and categorical variables.\n\nards <- ard_stack(syn_data$adsl, ard_continuous(variables = c(AAGE), statistic = ~ continuous_summary_fns(c(\"N\", \"mean\", \"sd\", \"median\", \"min\", \"max\"))\n  ),\n                 ard_categorical(variables = c(AGEGR1, SEX, ETHNIC, RACE)),\n                 .by = \"ARM\",\n                 .overall = TRUE)\n\nards\n```\n\n#### Visualize statistics comparison\n\nWith both data frames containing similar key variables (group_level, variable_label, etc.), statistics can be compared side-by-side by combining the tables.\n\n```{r}\n# rework the rtables output to match ----\n# rename the group2 to group1, rename stat_name from n to N\n\nreformat <- results |>\n  dplyr::as_tibble() |> \n  dplyr::select(-variable_label) |>\n  dplyr::rename(\"stat_rtables\" = stat) |>\n   dplyr::mutate(\n    variable_level = sub(\"^[^.]*\\\\.\", \"\", variable_level), # use variable_label\n    stat_name = dplyr::recode(stat_name, \"n\" = \"N\", \"count\" = \"n\"),\n    variable = dplyr::recode(variable, \"AAGE\" = \"AGE\"),\n    variable_level = dplyr::recode(variable_level, \"Male\" = \"M\", \"Female\" = \"F\"),\n    variable_level = dplyr::case_when(\n      variable_level %in% c(\"mean_sd\", \"median\", \"range\", \"n\") ~ NA_character_,\n      TRUE ~ variable_level\n    )\n  )\n\nards2 <- ards |>\n  dplyr::mutate(\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)),\n    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)),\n    group1 = dplyr::coalesce(group1, \"ARM\"),\n    group1_level = dplyr::coalesce(group1_level, \"All Patients\")\n  ) |>\n  dplyr::select(-context, -fmt_fn, -warning, -error)\n\n# perform a left join\n\ncompare <- dplyr::left_join(ards2, reformat, by = c(\"group1_level\",\"group1\", \"variable\", \"variable_level\", \"stat_name\"))\ncompare[1:20,]\n\n```\n\n#### Compare programmatically\n\nWith all stats aligned, functions such as `all.equal()` or `identical` can be used to verify if the stats produced are equivalent. \n\n```{r}\nna.omit(compare) %>%\n  dplyr::mutate(columns_match = stat == stat_rtables)\n```\n\n\n","srcMarkdownNoYaml":"\n\n### QCing rtables\n\nYou are likely familiar with the r packages developed by NEST for [generating tables and graphs](https://insightsengineering.github.io/tlg-catalog/stable/).  \nA common practice to ensure quality control (QC) of the calculated statistics is double programming - submitting the *same data* in a *different programmatic source* to ensure the results align. \nHistorically, these tables are compared to outputs produced by SAS statistical software.\nHere, we offer an alternative using the Analysis Results Datasets (ARDs). The CDISC Analysis Results Standard aims to facilitate automation, reproducibility, reusability, and traceability of analysis results data (ARD). \nThe {cards} and {cardx} packages can be used to create these analysis datasets.\n\n### Recommended QCing workflow\n\nBelow we provide an example workflow for QCing tables.\n\n#### Generate a table using {chevron}\n\n```{r}\n#| message: false\n#| code-summary: \"Show the code\"\nlibrary(chevron)\n\n# Create a table using the chevron package \ndmt01 <- chevron::run(dmt01, syn_data)\ndmt01\n\n```\n\n#### Flatten the table into a data.frame\n\nA rtables based output can be flattened into a data frame using the `as_results_df()` function from the rtables package. The `make_ard` argument set to `TRUE`, will format the data similar to the output generated by the {cards} package. \n\n```{r}\nresults <- rtables::as_result_df(dmt01, make_ard = TRUE)\nresults\n```\n\n#### Create a comparable ARD\nUsing the {cards} package, we stack the functions `ard_continuous()` for the continuous variables and `ard_categorical()` for categorical variables. \nThe default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses. \n\n```{r}\nlibrary(cards)\n\n# build ARDs that calculate relevant statistics for continuous and categorical variables.\n\nards <- ard_stack(syn_data$adsl, ard_continuous(variables = c(AAGE), statistic = ~ continuous_summary_fns(c(\"N\", \"mean\", \"sd\", \"median\", \"min\", \"max\"))\n  ),\n                 ard_categorical(variables = c(AGEGR1, SEX, ETHNIC, RACE)),\n                 .by = \"ARM\",\n                 .overall = TRUE)\n\nards\n```\n\n#### Visualize statistics comparison\n\nWith both data frames containing similar key variables (group_level, variable_label, etc.), statistics can be compared side-by-side by combining the tables.\n\n```{r}\n# rework the rtables output to match ----\n# rename the group2 to group1, rename stat_name from n to N\n\nreformat <- results |>\n  dplyr::as_tibble() |> \n  dplyr::select(-variable_label) |>\n  dplyr::rename(\"stat_rtables\" = stat) |>\n   dplyr::mutate(\n    variable_level = sub(\"^[^.]*\\\\.\", \"\", variable_level), # use variable_label\n    stat_name = dplyr::recode(stat_name, \"n\" = \"N\", \"count\" = \"n\"),\n    variable = dplyr::recode(variable, \"AAGE\" = \"AGE\"),\n    variable_level = dplyr::recode(variable_level, \"Male\" = \"M\", \"Female\" = \"F\"),\n    variable_level = dplyr::case_when(\n      variable_level %in% c(\"mean_sd\", \"median\", \"range\", \"n\") ~ NA_character_,\n      TRUE ~ variable_level\n    )\n  )\n\nards2 <- ards |>\n  dplyr::mutate(\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)),\n    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) > 0, as.character(.x[[1]]), NA_character_)),\n    group1 = dplyr::coalesce(group1, \"ARM\"),\n    group1_level = dplyr::coalesce(group1_level, \"All Patients\")\n  ) |>\n  dplyr::select(-context, -fmt_fn, -warning, -error)\n\n# perform a left join\n\ncompare <- dplyr::left_join(ards2, reformat, by = c(\"group1_level\",\"group1\", \"variable\", \"variable_level\", \"stat_name\"))\ncompare[1:20,]\n\n```\n\n#### Compare programmatically\n\nWith all stats aligned, functions such as `all.equal()` or `identical` can be used to verify if the stats produced are equivalent. \n\n```{r}\nna.omit(compare) %>%\n  dplyr::mutate(columns_match = stat == stat_rtables)\n```\n\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"01-QCing.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.553","editor":"source","theme":"cosmo","title":"QCing tables with ARDs","page-layout":"full","code-summary":"Show the code"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}