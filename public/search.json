[
  {
    "objectID": "quarto/02-QC-AET02.html",
    "href": "quarto/02-QC-AET02.html",
    "title": "QCing Adverse Events (AET02)",
    "section": "",
    "text": "Show the code\nlibrary(chevron)\n\ntlg_aet02 &lt;- chevron:: aet02_main(syn_data, arm_var = \"ARM\", lbl_overall = \"Overall ARM\")\nhead(tlg_aet02, n=15) #truncated preview\n\n\n                                                             A: Drug X    B: Placebo   C: Combination   Overall ARM\n                                                               (N=15)       (N=15)         (N=15)         (N=45)   \n———————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nTotal number of patients with at least one adverse event     13 (86.7%)   14 (93.3%)     15 (100%)      42 (93.3%) \nOverall total number of events                                   58           59             99             216    \ncl A.1                                                                                                             \n  Total number of patients with at least one adverse event   7 (46.7%)    6 (40.0%)      10 (66.7%)     23 (51.1%) \n  Total number of events                                         8            11             16             35     \n  dcd A.1.1.1.1                                              3 (20.0%)     1 (6.7%)      6 (40.0%)      10 (22.2%) \n  dcd A.1.1.1.2                                              5 (33.3%)    6 (40.0%)      6 (40.0%)      17 (37.8%) \ncl B.1                                                                                                             \n  Total number of patients with at least one adverse event   5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \n  Total number of events                                         6            6              12             24     \n  dcd B.1.1.1.1                                              5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \ncl B.2                                                                                                             \n  Total number of patients with at least one adverse event   11 (73.3%)   8 (53.3%)      10 (66.7%)     29 (64.4%) \n  Total number of events                                         18           15             20             53     \n  dcd B.2.1.2.1                                              5 (33.3%)    6 (40.0%)      5 (33.3%)      16 (35.6%) \n\n\n\n\n\nA {rtables} based output can be flattened into a data.frame using the as_results_df() function from the {rtables} package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package. Setting the add_tbl_str_decimals to FALSE will not return a column with the statistic as a formatted string. We also include a step to remove the “label” attribute for the statistics. The diffdf() function is sensitive to attribute mismatch, so we will remove them (set to NULL) to match the ARD results exactly.\n\nrtables_result &lt;- rtables::as_result_df(tlg_aet02, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nattr(rtables_result$stat, \"label\") &lt;- NULL\n\nrtables_result[1:6, -c(1:2, 7,8)]\n\n\n\n\n\ngroup2\ngroup2_level\nvariable\nvariable_level\nstat\n\n\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n13.0000000\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n0.8666667\n\n\nARM\nA: Drug X\nUSUBJID\nnonunique\n58.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n7.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n0.4666667\n\n\nARM\nA: Drug X\nAEBODSYS\nnonunique\n8.0000000\n\n\n\n\n\n\n\n\n\nIn the code below, we perform different data pre-processing for the different ARDs we want to create. Then, we generate separate ARDs using the {cards} package for the different sections of the AET02 table and compare them as subsets. Note: If your table does not have an “overall” column, you can use the ARD creation steps at the bottom of the page using primarily ard_categorical(). ard_hierarchical() is useful here to calculate the statistics for the overall column and allows for better filtering using the “context” column.\n\nlibrary(cards)\n\n# data pre-processing. filter observations with ANL01FL = \"Y\"\nadae &lt;- syn_data$adae |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\nadsl &lt;- syn_data$adsl |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\n\n# Keep only 1 record per patient\nadae_one_sub &lt;- adae |&gt; \n  dplyr::filter(!duplicated(adae[c(\"USUBJID\")]))\n\n# Keep only 1 record per patient for each AEBODSYS\nadae_one_sub_aebod &lt;- adae |&gt; \n  dplyr::filter(!duplicated(adae[c(\"USUBJID\", \"AEBODSYS\")]))\n\n# ----- ARDS -----\n# Total number of patients with at least one adverse event  \ntot_pat_ae &lt;- ard_stack_hierarchical(\n  data = adae_one_sub,\n  id = \"USUBJID\",\n  variables = c(SAFFL),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\"),\n  overall = TRUE) |&gt;\n  dplyr::filter(context == \"hierarchical\") |&gt; ## removing univariate analysis\n  shuffle_ard(trim = FALSE) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_))) # convert list to numeric\n\n# Total number of AEs \ntot_ae &lt;- ard_stack_hierarchical_count(\n  data = adae,\n  variables = c(SAFFL),\n  denominator = adsl,\n  by = ARM,\n  overall = TRUE) |&gt;\n  dplyr::filter(context == \"hierarchical_count\") |&gt; ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)), \n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of patients with at least one adverse event within each AEBODSYS\ntot_pat_ae_aebod &lt;- ard_stack_hierarchical(\n  id = \"USUBJID\",\n  data = adae_one_sub_aebod,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  overall = TRUE,\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::filter(context == \"hierarchical\") |&gt;  ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Total number of AEs for each AEBODSYS\ntot_ae_aebod &lt;- ard_stack_hierarchical_count(\n  data = adae,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  overall = TRUE) |&gt; \n  shuffle_ard(trim = FALSE) |&gt;\n  dplyr::filter(context == \"hierarchical_count\") |&gt; ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Count and Percent for each AEDECOD within each AEBODSYS\nae_n_p_aedecod &lt;- ard_stack_hierarchical(\n  data = adae,\n  id = \"USUBJID\",\n  variables = c(AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\"),\n  overall = TRUE) |&gt; \n  shuffle_ard(trim = FALSE) |&gt; \n  dplyr::filter(context == \"hierarchical\", \n                variable == \"AEDECOD\") |&gt; \n  dplyr::mutate(\n    # convert list numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n\n\n\nWe’ll modify the rtables result to closely match the ARD result:\n\nRename “group2_level” to ARM\nRemove any columns that aren’t in the ARD result (stat_name is being removed as it is a blank column)\n\n\n\nShow the code\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::rename(ARM = group2_level)|&gt;\n  dplyr::select(-c(\"stat_name\", \"group2\"))\n\nhead(rtables_result, n=10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nARM\nvariable\nvariable_level\nvariable_label\nstat\n\n\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\n13.0000000\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\n0.8666667\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nnonunique\nOverall total number of events\n58.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\n7.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\n0.4666667\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nnonunique\nTotal number of events\n8.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\n3.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\n0.2000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\n5.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\n0.3333333\n\n\n\n\n\n\nBecause the subsets of AET02 table are already separated in the ARDs, we can subset the {rtables} result equally to create a clean comparison.\n\n\n\ntot_pat_ae &lt;- tot_pat_ae |&gt; dplyr::select(c(\"ARM\", \"stat\"))\n\ntot_pat_ae_rtables &lt;- rtables_result |&gt;\n  dplyr::filter(variable_label == \"Total number of patients with at least one adverse event\" & variable == \"USUBJID\") |&gt;\n  dplyr::select(\"ARM\", \"stat\")\n\ndiffdf::diffdf(tot_pat_ae, tot_pat_ae_rtables, keys = c(\"ARM\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_ae &lt;- tot_ae |&gt;   \n  dplyr::rename(ARM = group1_level) |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM))|&gt;\n  dplyr::select(c(\"ARM\", \"stat\"))\n\ntot_ae_rtables &lt;- rtables_result |&gt;\n  dplyr::filter(variable == \"USUBJID\" & variable_label == \"Overall total number of events\")|&gt;\n  dplyr::select(\"ARM\", \"stat\")\n\ndiffdf::diffdf(tot_ae, tot_ae_rtables, keys = c(\"ARM\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_pat_ae_aebod &lt;- tot_pat_ae_aebod |&gt;\n  dplyr::rename(ARM = group1_level) |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM))|&gt;\n  dplyr::select(c(\"ARM\", \"variable\", \"variable_level\", \"stat\")) |&gt;\n  dplyr::mutate(\n    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\ntot_pat_ae_aebod_rtables &lt;- rtables_result |&gt;\n   dplyr::filter(variable_level == \"unique\" & variable_label == \"Total number of patients with at least one adverse event\" & group1 == \"AEBODSYS\") |&gt;\n  dplyr::select(c(\"ARM\", \"variable\", \"stat\", \"group1_level\")) |&gt;\n  dplyr::rename(variable_level = group1_level)\n\ndiffdf::diffdf(tot_pat_ae_aebod, tot_pat_ae_aebod_rtables, keys = c(\"ARM\", \"variable_level\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_ae_aebod &lt;- tot_ae_aebod |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ntot_ae_aebod_rtables &lt;- rtables_result |&gt;\n  dplyr::filter(variable_label == \"Total number of events\") |&gt;\n    dplyr::rename(label = group1_level) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ndiffdf::diffdf(tot_ae_aebod, tot_ae_aebod_rtables, keys = c(\"ARM\", \"label\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\nae_n_p_aedecod &lt;- ae_n_p_aedecod |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM)) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\nae_n_p_aedecod_rtables &lt;- rtables_result |&gt;\n  dplyr::filter(variable == \"AEDECOD\") |&gt;\n    dplyr::rename(label = variable_label) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ndiffdf::diffdf(ae_n_p_aedecod, ae_n_p_aedecod_rtables, keys = c(\"ARM\", \"label\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\n\nlibrary(cards)\n\n# data pre-processing. filter observations with ANL01FL = \"Y\"\nadae &lt;- syn_data$adae |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\nadsl &lt;- syn_data$adsl |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\n\n# Keep only 1 record per patient\nadae_one_sub &lt;- adae |&gt; \n  dplyr::filter(!duplicated(adae[c(\"USUBJID\")]))\n\n# Keep only 1 record per patient for each AEBODSYS\nadae_one_sub_aebod &lt;- adae |&gt; \n  dplyr::filter(!duplicated(adae[c(\"USUBJID\", \"AEBODSYS\")]))\n\n# ----- ARDS -----\n# Total number of patients with at least one adverse event  ## removing univariate analysis\ntot_pat_ae &lt;- ard_categorical(\n  data = adae_one_sub,\n  variables = c(SAFFL),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of AEs \ntot_ae &lt;- ard_categorical(\n  data = adae,\n  variables = c(SAFFL),\n  denominator = adsl,\n  by = ARM,\n  statistic = everything() ~ c(\"n\")) |&gt;\n  dplyr::mutate(\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of patients with at least one adverse event within each AEBODSYS\ntot_pat_ae_aebod &lt;- ard_categorical(\n  data = adae_one_sub_aebod,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Total number of AEs for each AEBODSYS\ntot_ae_aebod &lt;- ard_categorical(\n  data = adae,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\")) |&gt; \n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n  \n# Count and Percent for each AEDECOD within each AEBODSYS\nae_n_p_aedecod &lt;- ard_stack_hierarchical(\n  data = adae,\n  id = \"USUBJID\",\n  variables = c(AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt; \n  dplyr::filter(context == \"hierarchical\", \n                variable == \"AEDECOD\") |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))",
    "crumbs": [
      "Adverse Events Table"
    ]
  },
  {
    "objectID": "quarto/02-QC-AET02.html#adverse-events-aet02-qc-workflow",
    "href": "quarto/02-QC-AET02.html#adverse-events-aet02-qc-workflow",
    "title": "QCing Adverse Events (AET02)",
    "section": "",
    "text": "Show the code\nlibrary(chevron)\n\ntlg_aet02 &lt;- chevron:: aet02_main(syn_data, arm_var = \"ARM\", lbl_overall = \"Overall ARM\")\nhead(tlg_aet02, n=15) #truncated preview\n\n\n                                                             A: Drug X    B: Placebo   C: Combination   Overall ARM\n                                                               (N=15)       (N=15)         (N=15)         (N=45)   \n———————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nTotal number of patients with at least one adverse event     13 (86.7%)   14 (93.3%)     15 (100%)      42 (93.3%) \nOverall total number of events                                   58           59             99             216    \ncl A.1                                                                                                             \n  Total number of patients with at least one adverse event   7 (46.7%)    6 (40.0%)      10 (66.7%)     23 (51.1%) \n  Total number of events                                         8            11             16             35     \n  dcd A.1.1.1.1                                              3 (20.0%)     1 (6.7%)      6 (40.0%)      10 (22.2%) \n  dcd A.1.1.1.2                                              5 (33.3%)    6 (40.0%)      6 (40.0%)      17 (37.8%) \ncl B.1                                                                                                             \n  Total number of patients with at least one adverse event   5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \n  Total number of events                                         6            6              12             24     \n  dcd B.1.1.1.1                                              5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \ncl B.2                                                                                                             \n  Total number of patients with at least one adverse event   11 (73.3%)   8 (53.3%)      10 (66.7%)     29 (64.4%) \n  Total number of events                                         18           15             20             53     \n  dcd B.2.1.2.1                                              5 (33.3%)    6 (40.0%)      5 (33.3%)      16 (35.6%) \n\n\n\n\n\nA {rtables} based output can be flattened into a data.frame using the as_results_df() function from the {rtables} package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package. Setting the add_tbl_str_decimals to FALSE will not return a column with the statistic as a formatted string. We also include a step to remove the “label” attribute for the statistics. The diffdf() function is sensitive to attribute mismatch, so we will remove them (set to NULL) to match the ARD results exactly.\n\nrtables_result &lt;- rtables::as_result_df(tlg_aet02, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nattr(rtables_result$stat, \"label\") &lt;- NULL\n\nrtables_result[1:6, -c(1:2, 7,8)]\n\n\n\n\n\ngroup2\ngroup2_level\nvariable\nvariable_level\nstat\n\n\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n13.0000000\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n0.8666667\n\n\nARM\nA: Drug X\nUSUBJID\nnonunique\n58.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n7.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n0.4666667\n\n\nARM\nA: Drug X\nAEBODSYS\nnonunique\n8.0000000\n\n\n\n\n\n\n\n\n\nIn the code below, we perform different data pre-processing for the different ARDs we want to create. Then, we generate separate ARDs using the {cards} package for the different sections of the AET02 table and compare them as subsets. Note: If your table does not have an “overall” column, you can use the ARD creation steps at the bottom of the page using primarily ard_categorical(). ard_hierarchical() is useful here to calculate the statistics for the overall column and allows for better filtering using the “context” column.\n\nlibrary(cards)\n\n# data pre-processing. filter observations with ANL01FL = \"Y\"\nadae &lt;- syn_data$adae |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\nadsl &lt;- syn_data$adsl |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\n\n# Keep only 1 record per patient\nadae_one_sub &lt;- adae |&gt; \n  dplyr::filter(!duplicated(adae[c(\"USUBJID\")]))\n\n# Keep only 1 record per patient for each AEBODSYS\nadae_one_sub_aebod &lt;- adae |&gt; \n  dplyr::filter(!duplicated(adae[c(\"USUBJID\", \"AEBODSYS\")]))\n\n# ----- ARDS -----\n# Total number of patients with at least one adverse event  \ntot_pat_ae &lt;- ard_stack_hierarchical(\n  data = adae_one_sub,\n  id = \"USUBJID\",\n  variables = c(SAFFL),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\"),\n  overall = TRUE) |&gt;\n  dplyr::filter(context == \"hierarchical\") |&gt; ## removing univariate analysis\n  shuffle_ard(trim = FALSE) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_))) # convert list to numeric\n\n# Total number of AEs \ntot_ae &lt;- ard_stack_hierarchical_count(\n  data = adae,\n  variables = c(SAFFL),\n  denominator = adsl,\n  by = ARM,\n  overall = TRUE) |&gt;\n  dplyr::filter(context == \"hierarchical_count\") |&gt; ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)), \n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of patients with at least one adverse event within each AEBODSYS\ntot_pat_ae_aebod &lt;- ard_stack_hierarchical(\n  id = \"USUBJID\",\n  data = adae_one_sub_aebod,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  overall = TRUE,\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::filter(context == \"hierarchical\") |&gt;  ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Total number of AEs for each AEBODSYS\ntot_ae_aebod &lt;- ard_stack_hierarchical_count(\n  data = adae,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  overall = TRUE) |&gt; \n  shuffle_ard(trim = FALSE) |&gt;\n  dplyr::filter(context == \"hierarchical_count\") |&gt; ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Count and Percent for each AEDECOD within each AEBODSYS\nae_n_p_aedecod &lt;- ard_stack_hierarchical(\n  data = adae,\n  id = \"USUBJID\",\n  variables = c(AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\"),\n  overall = TRUE) |&gt; \n  shuffle_ard(trim = FALSE) |&gt; \n  dplyr::filter(context == \"hierarchical\", \n                variable == \"AEDECOD\") |&gt; \n  dplyr::mutate(\n    # convert list numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n\n\n\nWe’ll modify the rtables result to closely match the ARD result:\n\nRename “group2_level” to ARM\nRemove any columns that aren’t in the ARD result (stat_name is being removed as it is a blank column)\n\n\n\nShow the code\nrtables_result &lt;- rtables_result |&gt;\n  dplyr::rename(ARM = group2_level)|&gt;\n  dplyr::select(-c(\"stat_name\", \"group2\"))\n\nhead(rtables_result, n=10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nARM\nvariable\nvariable_level\nvariable_label\nstat\n\n\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\n13.0000000\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\n0.8666667\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nnonunique\nOverall total number of events\n58.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\n7.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\n0.4666667\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nnonunique\nTotal number of events\n8.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\n3.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\n0.2000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\n5.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\n0.3333333\n\n\n\n\n\n\nBecause the subsets of AET02 table are already separated in the ARDs, we can subset the {rtables} result equally to create a clean comparison.\n\n\n\ntot_pat_ae &lt;- tot_pat_ae |&gt; dplyr::select(c(\"ARM\", \"stat\"))\n\ntot_pat_ae_rtables &lt;- rtables_result |&gt;\n  dplyr::filter(variable_label == \"Total number of patients with at least one adverse event\" & variable == \"USUBJID\") |&gt;\n  dplyr::select(\"ARM\", \"stat\")\n\ndiffdf::diffdf(tot_pat_ae, tot_pat_ae_rtables, keys = c(\"ARM\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_ae &lt;- tot_ae |&gt;   \n  dplyr::rename(ARM = group1_level) |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM))|&gt;\n  dplyr::select(c(\"ARM\", \"stat\"))\n\ntot_ae_rtables &lt;- rtables_result |&gt;\n  dplyr::filter(variable == \"USUBJID\" & variable_label == \"Overall total number of events\")|&gt;\n  dplyr::select(\"ARM\", \"stat\")\n\ndiffdf::diffdf(tot_ae, tot_ae_rtables, keys = c(\"ARM\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_pat_ae_aebod &lt;- tot_pat_ae_aebod |&gt;\n  dplyr::rename(ARM = group1_level) |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM))|&gt;\n  dplyr::select(c(\"ARM\", \"variable\", \"variable_level\", \"stat\")) |&gt;\n  dplyr::mutate(\n    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\ntot_pat_ae_aebod_rtables &lt;- rtables_result |&gt;\n   dplyr::filter(variable_level == \"unique\" & variable_label == \"Total number of patients with at least one adverse event\" & group1 == \"AEBODSYS\") |&gt;\n  dplyr::select(c(\"ARM\", \"variable\", \"stat\", \"group1_level\")) |&gt;\n  dplyr::rename(variable_level = group1_level)\n\ndiffdf::diffdf(tot_pat_ae_aebod, tot_pat_ae_aebod_rtables, keys = c(\"ARM\", \"variable_level\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_ae_aebod &lt;- tot_ae_aebod |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ntot_ae_aebod_rtables &lt;- rtables_result |&gt;\n  dplyr::filter(variable_label == \"Total number of events\") |&gt;\n    dplyr::rename(label = group1_level) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ndiffdf::diffdf(tot_ae_aebod, tot_ae_aebod_rtables, keys = c(\"ARM\", \"label\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\nae_n_p_aedecod &lt;- ae_n_p_aedecod |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM)) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\nae_n_p_aedecod_rtables &lt;- rtables_result |&gt;\n  dplyr::filter(variable == \"AEDECOD\") |&gt;\n    dplyr::rename(label = variable_label) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ndiffdf::diffdf(ae_n_p_aedecod, ae_n_p_aedecod_rtables, keys = c(\"ARM\", \"label\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\n\nlibrary(cards)\n\n# data pre-processing. filter observations with ANL01FL = \"Y\"\nadae &lt;- syn_data$adae |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\nadsl &lt;- syn_data$adsl |&gt;\n  dplyr::filter(ANL01FL == \"Y\")\n\n# Keep only 1 record per patient\nadae_one_sub &lt;- adae |&gt; \n  dplyr::filter(!duplicated(adae[c(\"USUBJID\")]))\n\n# Keep only 1 record per patient for each AEBODSYS\nadae_one_sub_aebod &lt;- adae |&gt; \n  dplyr::filter(!duplicated(adae[c(\"USUBJID\", \"AEBODSYS\")]))\n\n# ----- ARDS -----\n# Total number of patients with at least one adverse event  ## removing univariate analysis\ntot_pat_ae &lt;- ard_categorical(\n  data = adae_one_sub,\n  variables = c(SAFFL),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of AEs \ntot_ae &lt;- ard_categorical(\n  data = adae,\n  variables = c(SAFFL),\n  denominator = adsl,\n  by = ARM,\n  statistic = everything() ~ c(\"n\")) |&gt;\n  dplyr::mutate(\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of patients with at least one adverse event within each AEBODSYS\ntot_pat_ae_aebod &lt;- ard_categorical(\n  data = adae_one_sub_aebod,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Total number of AEs for each AEBODSYS\ntot_ae_aebod &lt;- ard_categorical(\n  data = adae,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\")) |&gt; \n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n  \n# Count and Percent for each AEDECOD within each AEBODSYS\nae_n_p_aedecod &lt;- ard_stack_hierarchical(\n  data = adae,\n  id = \"USUBJID\",\n  variables = c(AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt; \n  dplyr::filter(context == \"hierarchical\", \n                variable == \"AEDECOD\") |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))",
    "crumbs": [
      "Adverse Events Table"
    ]
  }
]