[
  {
    "objectID": "quarto/04-QC-TTET01.html",
    "href": "quarto/04-QC-TTET01.html",
    "title": "QCing Time-to-event Summary (TTET01)",
    "section": "",
    "text": "Show the code\nlibrary(chevron)\n\n# Create a table using the chevron package \nproc_data &lt;- dunlin::log_filter(syn_data, PARAMCD == \"PFS\", \"adtte\")\ntlg_ttet01 &lt;- chevron::run(ttet01, proc_data)\ntlg_ttet01\n\n\n                                      A: Drug X        B: Placebo      C: Combination \n                                        (N=15)           (N=15)            (N=15)     \n  ————————————————————————————————————————————————————————————————————————————————————\n  Patients with event (%)             7 (46.7%)         12 (80%)          8 (53.3%)   \n    Earliest contributing event                                                       \n      Death                               5                11                 7       \n      Disease Progression                 2                 1                 1       \n  Patients without event (%)          8 (53.3%)          3 (20%)          7 (46.7%)   \n  Time to Event (MONTHS)                                                              \n    Median                               8.6               6.2               8.4      \n      95% CI                          (7.3, NE)        (4.8, 7.6)         (7.0, NE)   \n    25% and 75%-ile                    3.8, NE          4.7, 8.4           5.8, NE    \n    Range                           1.2 to 9.5 {1}     0.9 to 9.1      0.9 to 9.5 {1} \n  Unstratified Analysis                                                               \n    p-value (log-rank)                                   0.0973            0.9111     \n    Hazard Ratio                                          2.18              1.06      \n    95% CI                                            (0.85, 5.60)      (0.38, 2.94)  \n  6 MONTHS                                                                            \n    Patients remaining at risk            11                8                11       \n    Event Free Rate (%)                 73.33             53.33             73.33     \n    95% CI                          (50.95, 95.71)   (28.09, 78.58)    (50.95, 95.71) \n    Difference in Event Free Rate                        -20.00             0.00      \n      95% CI                                         (-53.74, 13.74)   (-31.65, 31.65)\n      p-value (Z-test)                                   0.2453            1.0000     \n  ————————————————————————————————————————————————————————————————————————————————————\n\n  {1} - Censored observation: range maximum\n  ————————————————————————————————————————————————————————————————————————————————————\n\n\n\n\n\nA rtables based output can be flattened into a data frame using the as_results_df() function from the rtables package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package.\n\n\nShow the code\nrtables_results &lt;- rtables::as_result_df(tlg_ttet01, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nhead(rtables_results, n=5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\ngroup2\ngroup2_level\nvariable\nvariable_level\nvariable_label\nstat_name\nstat\n\n\n\n\nNA\nNA\nARM\nA: Drug X\nIS_EVENT\ncount_fraction\nPatients with event (%)\ncount\n7.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nIS_EVENT\ncount_fraction\nPatients with event (%)\nfraction\n0.4666667\n\n\nEVNT1\nPatients with event (%)\nARM\nA: Drug X\nEVNTDESC\ncount.Death\nDeath\ncount\n5.0000000\n\n\nEVNT1\nPatients with event (%)\nARM\nA: Drug X\nEVNTDESC\ncount.Disease Progression\nDisease Progression\ncount\n2.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nIS_NOT_EVENT\ncount_fraction\nPatients without event (%)\ncount\n8.0000000\n\n\n\n\n\n\n\n\n\nUsing the {cards} package, we stack the functions ard_continuous() for the continuous variables and ard_categorical() for categorical variables. The default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses.\nIf any variable manipulation was done to the data prior to running the citril/chevron/tern/rtables commands, we suggest supplying the same data to these ARD functions, or running the same pre-processing steps to your data prior to creating ARDs to ensure variable names/levels match.\nNote: when a ‘by’ variable is specified in the ard_stack() call, a univariate tabluation is returned. We will have to remove those obervations later in the workflow to create a 1:1 match.\n\nlibrary(cards)\nlibrary(cardx)\nlibrary(dplyr)\nlibrary(survival)\n\n# Data Pre-processing\nadtte &lt;- proc_data$adtte |&gt;\n  dplyr::mutate(AVAL = (AVAL/ 30.4375), #convert days to months, this is the same calculation chevron uses.\n                is_event = CNSR == 0, # chevron coding of events\n                is_not_event = CNSR == 1)\n\n# ----- ARDS -----\n# Calculate Event Rates\nard_event_rates &lt;- cards::bind_ard(\n  # Patient Event Rates\n  ard_categorical(adtte, strata = c(ARM), variable = c(is_event), statistic = everything()~c(\"n\", \"p\")),\n  # Earliest Contributing Event\n  ard_categorical(adtte |&gt; dplyr::filter(is_event == TRUE), strata = c(ARM), variable = c(EVNTDESC), statistic = everything()~c(\"n\"))\n)\n \n# Calculate Time to Event\nard_tte &lt;- cards::bind_ard(\n  # calculate median\n  survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.type = \"plain\") |&gt;\n  ard_survival_survfit(probs = 0.5), \n  # calculate quantiles\n  survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.type = \"plain\") |&gt;\n  ard_survival_survfit(probs = c(0.25, 0.75)) |&gt;\n  filter(stat_name == \"estimate\"),\n  # calculate range\n  ard_continuous(adtte, by = c(ARM), variable = c(AVAL), statistic = ~ continuous_summary_fns(c(\"min\", \"max\")))\n)\n\n# Calculate Unstratified coxph\n# set the reference arm\nref_arm &lt;- \"A: Drug X\"\n\nard_unstrat_coxph &lt;- ard_pairwise(\n  adtte,\n  variable = ARM,\n  .f = \\(df) {coxph(Surv(AVAL, is_event) ~ ARM, data = df, ties = \"efron\") |&gt; \n      ard_regression(exponentiate = TRUE) |&gt;\n      dplyr::filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\") & variable_level != ref_arm)},\n  include = ref_arm\n) |&gt;\n  bind_ard() # Pairwise Analysis generated a list of ARDs\n\n# calculate the pvalue\nard_pval &lt;- ard_pairwise(\n  adtte,\n  variable = ARM,\n  .f = \\(df) {ard_survival_survdiff(survival::Surv(AVAL, is_event) ~ ARM, data = df) |&gt;\n      dplyr::filter(stat_name %in% \"p.value\")},\n  include = ref_arm) # Pairwise Analysis generated a list of ARDs\n\nard_pval &lt;- do.call(rbind, ard_pval)\n\n# 6 Months Risk Analysis\nard_surv_time &lt;- survfit(Surv(AVAL, is_event) ~ ARM, adtte, conf.int = 0.95, conf.type = \"plain\") |&gt; ard_survival_survfit(time = 6) |&gt;\n  dplyr::filter(stat_name != \"std.error\")\n\n# difference in event free rate\nard_surv_time_diff &lt;- survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.int = 0.95, conf.type = \"plain\") |&gt;\n  ard_survival_survfit_diff(times = 6) |&gt;\n  filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\", \"p.value\"))\n\nhead(ard_surv_time_diff, n=5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nvariable\nvariable_level\ncontext\nstat_name\nstat_label\nstat\nfmt_fn\nwarning\nerror\n\n\n\n\nARM\n2\ntime\n6\nsurvival_survfit_diff\nestimate\nSurvival Difference\n0.2\n1\nNULL\nNULL\n\n\nARM\n2\ntime\n6\nsurvival_survfit_diff\nconf.low\nCI Lower Bound\n-0.1373737\n1\nNULL\nNULL\n\n\nARM\n2\ntime\n6\nsurvival_survfit_diff\nconf.high\nCI Upper Bound\n0.5373737\n1\nNULL\nNULL\n\n\nARM\n2\ntime\n6\nsurvival_survfit_diff\np.value\np-value\n0.2452781\n1\nNULL\nNULL\n\n\nARM\n3\ntime\n6\nsurvival_survfit_diff\nestimate\nSurvival Difference\n0\n1\nNULL\nNULL\n\n\n\n\n\n\n\n\n\nTo ensure the {rtables} and ARD results and compatiable for comparison, some reformatting will need to be applied and may be different for each sub-table. Below is a helper function created to apply a row transformation for duplicate stat_namein the {rtables} result. For example, two rows may be called “rate_ci” where one row is the lower bound of the confidence interval and the other is the upper bound. This function transforms these rows using the new stat_name values provided in the values parameter.\n\n# function to apply row-based transformation\napply_row_transformation &lt;- function(data, condition, values) {\n  data %&gt;%\n    group_by(group = (variable_level == condition)) %&gt;%\n    mutate(\n      row_num = row_number(),\n      variable_level = case_when(\n        group & row_number() %% 2 == 1 ~ values[1],  # Odd row in condition group\n        group & row_number() %% 2 == 0 ~ values[2],  # Even row in condition group\n        TRUE ~ variable_level  # Keep original value\n      )\n    ) %&gt;%\n    ungroup() %&gt;%\n    select(-group, -row_num)  # Remove temporary columns\n}\n\n\n\n\n# {rtables}\nrtables_event_rate &lt;-  rtables_results |&gt;\n  filter(variable_label == \"Patients with event (%)\" | variable_label == \"Patients without event (%)\" | group1_level == \"Patients with event (%)\") |&gt;\n  dplyr::rename(group1 = group2,\n                group1_level = group2_level,\n                # rename other vars to avoid error\n                group2 = group1,\n                group2_level = group1_level) |&gt;\n  dplyr::select(c(group1, group1_level, variable, stat_name, stat))|&gt;\n  dplyr::mutate(stat_name = dplyr::recode(stat_name, \"count\" = \"n\"),\n                stat_name = dplyr::recode(stat_name, \"fraction\" = \"p\"))\n\n# {cards}\nard_event_rates &lt;- ard_event_rates |&gt;\n   mutate(\n    variable = recode(variable, \"is_event\" = \"IS_EVENT\"),\n    variable = ifelse(variable_level == FALSE & variable != \"EVNTDESC\", \"IS_NOT_EVENT\", variable),\n                group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n                 stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_))\n                ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"stat_name\", \"stat\"))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_event_rate, \n  ard_event_rates, \n  keys = c(\"group1\", \"group1_level\", \"variable\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n\n\n\n\n\n# {rtables}\nrtables_tte &lt;- rtables_results |&gt;\n  filter(variable == \"time_to_event\") |&gt;\n  rename(group1 = group2,\n         group1_level = group2_level,\n         group2 = group1,\n         group2_level = group1_level) |&gt;\n  apply_row_transformation(\"95% CI\", c(\"conf.low\", \"conf.high\")) |&gt;\n  apply_row_transformation(\"Range\", c(\"min\", \"max\")) |&gt;\n  apply_row_transformation(\"25% and 75%-ile\", c(\"0.25\", \"0.75\")) |&gt;\n  mutate(variable_level = recode(variable_level, \"Median\" = \"estimate\")) |&gt;\n  dplyr::select(c(group1, group1_level, variable_level, stat)) |&gt;\n  rename(stat_name = variable_level)\n\n# {cards}\nard_tte &lt;- ard_tte |&gt;\n  mutate(group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n          stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n         variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n         stat_name = if_else(variable_level %in% c(\"0.25\", \"0.75\") & stat_name == \"estimate\", variable_level, stat_name)\n                ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"stat_name\", \"stat\"))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_tte, \n  ard_tte, \n  keys = c(\"group1\", \"group1_level\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n\n\n\n\n\n# {rtables}\nrtables_unstrat_coxph &lt;- rtables_results |&gt;\n  filter(variable == \"coxph_unstratified\" & !is.na(stat) & variable_level !=\"pvalue\") |&gt;\n  select(\"group2\", \"group2_level\", \"variable_level\", \"stat\") |&gt;\n  apply_row_transformation(\"hr_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(variable = group2,\n         variable_level = group2_level,\n         stat_name = variable_level) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name, \"hr\" = \"estimate\"))\n\n# logpvalue\nrtables_pval &lt;- rtables_results |&gt;\n  filter(variable_level ==\"pvalue\" & !is.na(stat)) |&gt;\n  select(\"group2_level\", \"stat\") |&gt;\n  rename(\"rowname\"=\"group2_level\")\n\n# {cards}/{cardx}\nard_unstrat_coxph &lt;- ard_unstrat_coxph |&gt;\n  mutate(variable = purrr::map_chr(variable, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n          stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n         variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_))\n                ) |&gt;\n  dplyr::select(c(\"variable\", \"variable_level\", \"stat_name\", \"stat\"))\nattr(ard_unstrat_coxph$variable_level, \"names\") &lt;- NULL\nattr(ard_unstrat_coxph$stat, \"names\") &lt;- NULL\n\n# log_pval\nard_pval &lt;- ard_pval |&gt;\n  tibble::rownames_to_column() |&gt;\n  select(c(\"rowname\", \"stat\")) |&gt;\n   mutate(stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\nard_pval$rowname &lt;-  sub('.*vs\\\\.\\\\s*', \"\", ard_pval$rowname) \nard_pval$rowname &lt;-  sub(\"^'(.*)'$\", \"\\\\1\", ard_pval$rowname) \n\n# Compare stats\ndiffdf::diffdf(\n  rtables_unstrat_coxph, \n  ard_unstrat_coxph, \n  keys = c(\"variable\", \"variable_level\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n# Log pvalue\ndiffdf::diffdf(\n  rtables_pval, \n  ard_pval, \n  keys = c(\"rowname\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n\n\n\n\n\n# {rtables}\nrtables_surv_time &lt;- rtables_results |&gt;\n  filter(variable == \"surv_6\") |&gt;\n  select(c(\"group2_level\", \"variable_level\", \"stat\")) |&gt;\n  apply_row_transformation(\"rate_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(group1_level = group2_level,\n         stat_name = variable_level) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name, \"pt_at_risk\" = \"n.risk\",\n                                   \"event_free_rate\"= \"estimate\"))\n# {cards}/{cardx}\nard_surv_time &lt;- ard_surv_time |&gt;\n  select(\"group1_level\", \"stat_name\", \"stat\") |&gt;\n  mutate(group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n          stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    stat = case_when(\n      stat_name == \"estimate\" ~ stat * 100,   \n      stat_name == \"conf.low\" ~ stat * 100,   \n      stat_name == \"conf.high\" ~ stat * 100,  \n      TRUE ~ stat                                    \n    ))\n\n# Compare stats\ndiffdf::diffdf(\n  rtables_surv_time, \n  ard_surv_time, \n  keys = c(\"group1_level\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n\n\n\n\n\n# {rtables}\nrtables_surv_diff &lt;- rtables_results |&gt;\n  filter(variable == \"surv_diff_6\" & !is.na(stat)) |&gt;\n  select(c(\"group2_level\", \"variable_level\", \"stat\")) |&gt;\n  apply_row_transformation(\"rate_diff_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(group1_level = group2_level,\n         stat_name = variable_level) |&gt;\n mutate(stat_name = dplyr::recode(stat_name, \"rate_diff\" = \"estimate\",\n                                   \"ztest_pval\"= \"p.value\"))\n# {cards}/{cardx}\nard_surv_time_diff &lt;- ard_surv_time_diff |&gt;\n  select(\"group1_level\", \"stat_name\", \"stat\") |&gt;\n  mutate(group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n          stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    stat = case_when(\n      stat_name == \"estimate\" ~ stat * 100,   \n      stat_name == \"conf.low\" ~ stat * 100,   \n      stat_name == \"conf.high\" ~ stat * 100,  \n      TRUE ~ stat                                    \n    ))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_surv_diff, \n  ard_surv_time_diff, \n  keys = c(\"group1_level\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nDifferences found between the objects!\n\nSummary of BASE and COMPARE\n  ========================================================================\n    PROPERTY             BASE                          COMP               \n  ------------------------------------------------------------------------\n      Name         rtables_surv_diff            ard_surv_time_diff        \n     Class     \"tbl_df, tbl, data.frame\"  \"card, tbl_df, tbl, data.frame\" \n    Rows(#)                8                             8                \n   Columns(#)              3                             3                \n  ------------------------------------------------------------------------\n\n\nThere are rows in BASE that are not in COMPARE !!\n  ====================================\n   group1_level  stat_name    stat    \n  ------------------------------------\n   \"B: Placebo\"  conf.high   13.73737 \n   \"B: Placebo\"  conf.low   -53.73737 \n   \"B: Placebo\"  estimate   -20.00000 \n  ------------------------------------\n\n\nThere are rows in COMPARE that are not in BASE !!\n  ====================================\n   group1_level  stat_name    stat    \n  ------------------------------------\n   \"B: Placebo\"  conf.high   53.73737 \n   \"B: Placebo\"  conf.low   -13.73737 \n   \"B: Placebo\"  estimate    20.00000 \n  ------------------------------------",
    "crumbs": [
      "Time-to-Event Table"
    ]
  },
  {
    "objectID": "quarto/04-QC-TTET01.html#time-to-event-summary-ttet01-qc-workflow",
    "href": "quarto/04-QC-TTET01.html#time-to-event-summary-ttet01-qc-workflow",
    "title": "QCing Time-to-event Summary (TTET01)",
    "section": "",
    "text": "Show the code\nlibrary(chevron)\n\n# Create a table using the chevron package \nproc_data &lt;- dunlin::log_filter(syn_data, PARAMCD == \"PFS\", \"adtte\")\ntlg_ttet01 &lt;- chevron::run(ttet01, proc_data)\ntlg_ttet01\n\n\n                                      A: Drug X        B: Placebo      C: Combination \n                                        (N=15)           (N=15)            (N=15)     \n  ————————————————————————————————————————————————————————————————————————————————————\n  Patients with event (%)             7 (46.7%)         12 (80%)          8 (53.3%)   \n    Earliest contributing event                                                       \n      Death                               5                11                 7       \n      Disease Progression                 2                 1                 1       \n  Patients without event (%)          8 (53.3%)          3 (20%)          7 (46.7%)   \n  Time to Event (MONTHS)                                                              \n    Median                               8.6               6.2               8.4      \n      95% CI                          (7.3, NE)        (4.8, 7.6)         (7.0, NE)   \n    25% and 75%-ile                    3.8, NE          4.7, 8.4           5.8, NE    \n    Range                           1.2 to 9.5 {1}     0.9 to 9.1      0.9 to 9.5 {1} \n  Unstratified Analysis                                                               \n    p-value (log-rank)                                   0.0973            0.9111     \n    Hazard Ratio                                          2.18              1.06      \n    95% CI                                            (0.85, 5.60)      (0.38, 2.94)  \n  6 MONTHS                                                                            \n    Patients remaining at risk            11                8                11       \n    Event Free Rate (%)                 73.33             53.33             73.33     \n    95% CI                          (50.95, 95.71)   (28.09, 78.58)    (50.95, 95.71) \n    Difference in Event Free Rate                        -20.00             0.00      \n      95% CI                                         (-53.74, 13.74)   (-31.65, 31.65)\n      p-value (Z-test)                                   0.2453            1.0000     \n  ————————————————————————————————————————————————————————————————————————————————————\n\n  {1} - Censored observation: range maximum\n  ————————————————————————————————————————————————————————————————————————————————————\n\n\n\n\n\nA rtables based output can be flattened into a data frame using the as_results_df() function from the rtables package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package.\n\n\nShow the code\nrtables_results &lt;- rtables::as_result_df(tlg_ttet01, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nhead(rtables_results, n=5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\ngroup2\ngroup2_level\nvariable\nvariable_level\nvariable_label\nstat_name\nstat\n\n\n\n\nNA\nNA\nARM\nA: Drug X\nIS_EVENT\ncount_fraction\nPatients with event (%)\ncount\n7.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nIS_EVENT\ncount_fraction\nPatients with event (%)\nfraction\n0.4666667\n\n\nEVNT1\nPatients with event (%)\nARM\nA: Drug X\nEVNTDESC\ncount.Death\nDeath\ncount\n5.0000000\n\n\nEVNT1\nPatients with event (%)\nARM\nA: Drug X\nEVNTDESC\ncount.Disease Progression\nDisease Progression\ncount\n2.0000000\n\n\nNA\nNA\nARM\nA: Drug X\nIS_NOT_EVENT\ncount_fraction\nPatients without event (%)\ncount\n8.0000000\n\n\n\n\n\n\n\n\n\nUsing the {cards} package, we stack the functions ard_continuous() for the continuous variables and ard_categorical() for categorical variables. The default statistics calculated for each of these data types are included - these can be adapted for bespoke analyses.\nIf any variable manipulation was done to the data prior to running the citril/chevron/tern/rtables commands, we suggest supplying the same data to these ARD functions, or running the same pre-processing steps to your data prior to creating ARDs to ensure variable names/levels match.\nNote: when a ‘by’ variable is specified in the ard_stack() call, a univariate tabluation is returned. We will have to remove those obervations later in the workflow to create a 1:1 match.\n\nlibrary(cards)\nlibrary(cardx)\nlibrary(dplyr)\nlibrary(survival)\n\n# Data Pre-processing\nadtte &lt;- proc_data$adtte |&gt;\n  dplyr::mutate(AVAL = (AVAL/ 30.4375), #convert days to months, this is the same calculation chevron uses.\n                is_event = CNSR == 0, # chevron coding of events\n                is_not_event = CNSR == 1)\n\n# ----- ARDS -----\n# Calculate Event Rates\nard_event_rates &lt;- cards::bind_ard(\n  # Patient Event Rates\n  ard_categorical(adtte, strata = c(ARM), variable = c(is_event), statistic = everything()~c(\"n\", \"p\")),\n  # Earliest Contributing Event\n  ard_categorical(adtte |&gt; dplyr::filter(is_event == TRUE), strata = c(ARM), variable = c(EVNTDESC), statistic = everything()~c(\"n\"))\n)\n \n# Calculate Time to Event\nard_tte &lt;- cards::bind_ard(\n  # calculate median\n  survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.type = \"plain\") |&gt;\n  ard_survival_survfit(probs = 0.5), \n  # calculate quantiles\n  survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.type = \"plain\") |&gt;\n  ard_survival_survfit(probs = c(0.25, 0.75)) |&gt;\n  filter(stat_name == \"estimate\"),\n  # calculate range\n  ard_continuous(adtte, by = c(ARM), variable = c(AVAL), statistic = ~ continuous_summary_fns(c(\"min\", \"max\")))\n)\n\n# Calculate Unstratified coxph\n# set the reference arm\nref_arm &lt;- \"A: Drug X\"\n\nard_unstrat_coxph &lt;- ard_pairwise(\n  adtte,\n  variable = ARM,\n  .f = \\(df) {coxph(Surv(AVAL, is_event) ~ ARM, data = df, ties = \"efron\") |&gt; \n      ard_regression(exponentiate = TRUE) |&gt;\n      dplyr::filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\") & variable_level != ref_arm)},\n  include = ref_arm\n) |&gt;\n  bind_ard() # Pairwise Analysis generated a list of ARDs\n\n# calculate the pvalue\nard_pval &lt;- ard_pairwise(\n  adtte,\n  variable = ARM,\n  .f = \\(df) {ard_survival_survdiff(survival::Surv(AVAL, is_event) ~ ARM, data = df) |&gt;\n      dplyr::filter(stat_name %in% \"p.value\")},\n  include = ref_arm) # Pairwise Analysis generated a list of ARDs\n\nard_pval &lt;- do.call(rbind, ard_pval)\n\n# 6 Months Risk Analysis\nard_surv_time &lt;- survfit(Surv(AVAL, is_event) ~ ARM, adtte, conf.int = 0.95, conf.type = \"plain\") |&gt; ard_survival_survfit(time = 6) |&gt;\n  dplyr::filter(stat_name != \"std.error\")\n\n# difference in event free rate\nard_surv_time_diff &lt;- survfit(Surv(AVAL, is_event) ~ ARM, data = adtte, conf.int = 0.95, conf.type = \"plain\") |&gt;\n  ard_survival_survfit_diff(times = 6) |&gt;\n  filter(stat_name %in% c(\"estimate\", \"conf.low\", \"conf.high\", \"p.value\"))\n\nhead(ard_surv_time_diff, n=5)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nvariable\nvariable_level\ncontext\nstat_name\nstat_label\nstat\nfmt_fn\nwarning\nerror\n\n\n\n\nARM\n2\ntime\n6\nsurvival_survfit_diff\nestimate\nSurvival Difference\n0.2\n1\nNULL\nNULL\n\n\nARM\n2\ntime\n6\nsurvival_survfit_diff\nconf.low\nCI Lower Bound\n-0.1373737\n1\nNULL\nNULL\n\n\nARM\n2\ntime\n6\nsurvival_survfit_diff\nconf.high\nCI Upper Bound\n0.5373737\n1\nNULL\nNULL\n\n\nARM\n2\ntime\n6\nsurvival_survfit_diff\np.value\np-value\n0.2452781\n1\nNULL\nNULL\n\n\nARM\n3\ntime\n6\nsurvival_survfit_diff\nestimate\nSurvival Difference\n0\n1\nNULL\nNULL\n\n\n\n\n\n\n\n\n\nTo ensure the {rtables} and ARD results and compatiable for comparison, some reformatting will need to be applied and may be different for each sub-table. Below is a helper function created to apply a row transformation for duplicate stat_namein the {rtables} result. For example, two rows may be called “rate_ci” where one row is the lower bound of the confidence interval and the other is the upper bound. This function transforms these rows using the new stat_name values provided in the values parameter.\n\n# function to apply row-based transformation\napply_row_transformation &lt;- function(data, condition, values) {\n  data %&gt;%\n    group_by(group = (variable_level == condition)) %&gt;%\n    mutate(\n      row_num = row_number(),\n      variable_level = case_when(\n        group & row_number() %% 2 == 1 ~ values[1],  # Odd row in condition group\n        group & row_number() %% 2 == 0 ~ values[2],  # Even row in condition group\n        TRUE ~ variable_level  # Keep original value\n      )\n    ) %&gt;%\n    ungroup() %&gt;%\n    select(-group, -row_num)  # Remove temporary columns\n}\n\n\n\n\n# {rtables}\nrtables_event_rate &lt;-  rtables_results |&gt;\n  filter(variable_label == \"Patients with event (%)\" | variable_label == \"Patients without event (%)\" | group1_level == \"Patients with event (%)\") |&gt;\n  dplyr::rename(group1 = group2,\n                group1_level = group2_level,\n                # rename other vars to avoid error\n                group2 = group1,\n                group2_level = group1_level) |&gt;\n  dplyr::select(c(group1, group1_level, variable, stat_name, stat))|&gt;\n  dplyr::mutate(stat_name = dplyr::recode(stat_name, \"count\" = \"n\"),\n                stat_name = dplyr::recode(stat_name, \"fraction\" = \"p\"))\n\n# {cards}\nard_event_rates &lt;- ard_event_rates |&gt;\n   mutate(\n    variable = recode(variable, \"is_event\" = \"IS_EVENT\"),\n    variable = ifelse(variable_level == FALSE & variable != \"EVNTDESC\", \"IS_NOT_EVENT\", variable),\n                group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n                 stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_))\n                ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"variable\", \"stat_name\", \"stat\"))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_event_rate, \n  ard_event_rates, \n  keys = c(\"group1\", \"group1_level\", \"variable\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n\n\n\n\n\n# {rtables}\nrtables_tte &lt;- rtables_results |&gt;\n  filter(variable == \"time_to_event\") |&gt;\n  rename(group1 = group2,\n         group1_level = group2_level,\n         group2 = group1,\n         group2_level = group1_level) |&gt;\n  apply_row_transformation(\"95% CI\", c(\"conf.low\", \"conf.high\")) |&gt;\n  apply_row_transformation(\"Range\", c(\"min\", \"max\")) |&gt;\n  apply_row_transformation(\"25% and 75%-ile\", c(\"0.25\", \"0.75\")) |&gt;\n  mutate(variable_level = recode(variable_level, \"Median\" = \"estimate\")) |&gt;\n  dplyr::select(c(group1, group1_level, variable_level, stat)) |&gt;\n  rename(stat_name = variable_level)\n\n# {cards}\nard_tte &lt;- ard_tte |&gt;\n  mutate(group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n          stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n         variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n         stat_name = if_else(variable_level %in% c(\"0.25\", \"0.75\") & stat_name == \"estimate\", variable_level, stat_name)\n                ) |&gt;\n  dplyr::select(c(\"group1\", \"group1_level\", \"stat_name\", \"stat\"))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_tte, \n  ard_tte, \n  keys = c(\"group1\", \"group1_level\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n\n\n\n\n\n# {rtables}\nrtables_unstrat_coxph &lt;- rtables_results |&gt;\n  filter(variable == \"coxph_unstratified\" & !is.na(stat) & variable_level !=\"pvalue\") |&gt;\n  select(\"group2\", \"group2_level\", \"variable_level\", \"stat\") |&gt;\n  apply_row_transformation(\"hr_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(variable = group2,\n         variable_level = group2_level,\n         stat_name = variable_level) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name, \"hr\" = \"estimate\"))\n\n# logpvalue\nrtables_pval &lt;- rtables_results |&gt;\n  filter(variable_level ==\"pvalue\" & !is.na(stat)) |&gt;\n  select(\"group2_level\", \"stat\") |&gt;\n  rename(\"rowname\"=\"group2_level\")\n\n# {cards}/{cardx}\nard_unstrat_coxph &lt;- ard_unstrat_coxph |&gt;\n  mutate(variable = purrr::map_chr(variable, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n          stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n         variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_))\n                ) |&gt;\n  dplyr::select(c(\"variable\", \"variable_level\", \"stat_name\", \"stat\"))\nattr(ard_unstrat_coxph$variable_level, \"names\") &lt;- NULL\nattr(ard_unstrat_coxph$stat, \"names\") &lt;- NULL\n\n# log_pval\nard_pval &lt;- ard_pval |&gt;\n  tibble::rownames_to_column() |&gt;\n  select(c(\"rowname\", \"stat\")) |&gt;\n   mutate(stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\nard_pval$rowname &lt;-  sub('.*vs\\\\.\\\\s*', \"\", ard_pval$rowname) \nard_pval$rowname &lt;-  sub(\"^'(.*)'$\", \"\\\\1\", ard_pval$rowname) \n\n# Compare stats\ndiffdf::diffdf(\n  rtables_unstrat_coxph, \n  ard_unstrat_coxph, \n  keys = c(\"variable\", \"variable_level\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n# Log pvalue\ndiffdf::diffdf(\n  rtables_pval, \n  ard_pval, \n  keys = c(\"rowname\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n\n\n\n\n\n# {rtables}\nrtables_surv_time &lt;- rtables_results |&gt;\n  filter(variable == \"surv_6\") |&gt;\n  select(c(\"group2_level\", \"variable_level\", \"stat\")) |&gt;\n  apply_row_transformation(\"rate_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(group1_level = group2_level,\n         stat_name = variable_level) |&gt;\n  mutate(stat_name = dplyr::recode(stat_name, \"pt_at_risk\" = \"n.risk\",\n                                   \"event_free_rate\"= \"estimate\"))\n# {cards}/{cardx}\nard_surv_time &lt;- ard_surv_time |&gt;\n  select(\"group1_level\", \"stat_name\", \"stat\") |&gt;\n  mutate(group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n          stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    stat = case_when(\n      stat_name == \"estimate\" ~ stat * 100,   \n      stat_name == \"conf.low\" ~ stat * 100,   \n      stat_name == \"conf.high\" ~ stat * 100,  \n      TRUE ~ stat                                    \n    ))\n\n# Compare stats\ndiffdf::diffdf(\n  rtables_surv_time, \n  ard_surv_time, \n  keys = c(\"group1_level\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nNo issues were found!\n\n\n\n\n\n\n# {rtables}\nrtables_surv_diff &lt;- rtables_results |&gt;\n  filter(variable == \"surv_diff_6\" & !is.na(stat)) |&gt;\n  select(c(\"group2_level\", \"variable_level\", \"stat\")) |&gt;\n  apply_row_transformation(\"rate_diff_ci\", c(\"conf.low\", \"conf.high\")) |&gt;\n  rename(group1_level = group2_level,\n         stat_name = variable_level) |&gt;\n mutate(stat_name = dplyr::recode(stat_name, \"rate_diff\" = \"estimate\",\n                                   \"ztest_pval\"= \"p.value\"))\n# {cards}/{cardx}\nard_surv_time_diff &lt;- ard_surv_time_diff |&gt;\n  select(\"group1_level\", \"stat_name\", \"stat\") |&gt;\n  mutate(group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n          stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    stat = case_when(\n      stat_name == \"estimate\" ~ stat * 100,   \n      stat_name == \"conf.low\" ~ stat * 100,   \n      stat_name == \"conf.high\" ~ stat * 100,  \n      TRUE ~ stat                                    \n    ))\n\n# compare stats\ndiffdf::diffdf(\n  rtables_surv_diff, \n  ard_surv_time_diff, \n  keys = c(\"group1_level\", \"stat_name\", \"stat\"), \n  suppress_warnings = TRUE)\n\nDifferences found between the objects!\n\nSummary of BASE and COMPARE\n  ========================================================================\n    PROPERTY             BASE                          COMP               \n  ------------------------------------------------------------------------\n      Name         rtables_surv_diff            ard_surv_time_diff        \n     Class     \"tbl_df, tbl, data.frame\"  \"card, tbl_df, tbl, data.frame\" \n    Rows(#)                8                             8                \n   Columns(#)              3                             3                \n  ------------------------------------------------------------------------\n\n\nThere are rows in BASE that are not in COMPARE !!\n  ====================================\n   group1_level  stat_name    stat    \n  ------------------------------------\n   \"B: Placebo\"  conf.high   13.73737 \n   \"B: Placebo\"  conf.low   -53.73737 \n   \"B: Placebo\"  estimate   -20.00000 \n  ------------------------------------\n\n\nThere are rows in COMPARE that are not in BASE !!\n  ====================================\n   group1_level  stat_name    stat    \n  ------------------------------------\n   \"B: Placebo\"  conf.high   53.73737 \n   \"B: Placebo\"  conf.low   -13.73737 \n   \"B: Placebo\"  estimate    20.00000 \n  ------------------------------------",
    "crumbs": [
      "Time-to-Event Table"
    ]
  },
  {
    "objectID": "quarto/02-QC-AET02.html",
    "href": "quarto/02-QC-AET02.html",
    "title": "QCing Adverse Events (AET02)",
    "section": "",
    "text": "Show the code\nlibrary(chevron)\n\ntlg_aet02 &lt;- chevron:: aet02_main(syn_data, arm_var = \"ARM\", lbl_overall = \"Overall ARM\")\nhead(tlg_aet02, n=15) #truncated preview\n\n\n                                                             A: Drug X    B: Placebo   C: Combination   Overall ARM\n                                                               (N=15)       (N=15)         (N=15)         (N=45)   \n———————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nTotal number of patients with at least one adverse event     13 (86.7%)   14 (93.3%)     15 (100%)      42 (93.3%) \nOverall total number of events                                   58           59             99             216    \ncl A.1                                                                                                             \n  Total number of patients with at least one adverse event   7 (46.7%)    6 (40.0%)      10 (66.7%)     23 (51.1%) \n  Total number of events                                         8            11             16             35     \n  dcd A.1.1.1.1                                              3 (20.0%)     1 (6.7%)      6 (40.0%)      10 (22.2%) \n  dcd A.1.1.1.2                                              5 (33.3%)    6 (40.0%)      6 (40.0%)      17 (37.8%) \ncl B.1                                                                                                             \n  Total number of patients with at least one adverse event   5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \n  Total number of events                                         6            6              12             24     \n  dcd B.1.1.1.1                                              5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \ncl B.2                                                                                                             \n  Total number of patients with at least one adverse event   11 (73.3%)   8 (53.3%)      10 (66.7%)     29 (64.4%) \n  Total number of events                                         18           15             20             53     \n  dcd B.2.1.2.1                                              5 (33.3%)    6 (40.0%)      5 (33.3%)      16 (35.6%) \n\n\n\n\n\nA {rtables} based output can be flattened into a data.frame using the as_results_df() function from the {rtables} package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package. Setting the add_tbl_str_decimals to FALSE will not return a column with the statistic as a formatted string. We also include a step to remove the “label” attribute for the statistics. The diffdf() function is sensitive to attribute mismatch, so we will remove them (set to NULL) to match the ARD results exactly.\n\nrtables_result &lt;- rtables::as_result_df(tlg_aet02, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nattr(rtables_result$stat, \"label\") &lt;- NULL\n\nrtables_result[1:6, -c(1:2, 7,8)]\n\n\n\n\n\ngroup2\ngroup2_level\nvariable\nvariable_level\nstat\n\n\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n13.0000000\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n0.8666667\n\n\nARM\nA: Drug X\nUSUBJID\nnonunique\n58.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n7.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n0.4666667\n\n\nARM\nA: Drug X\nAEBODSYS\nnonunique\n8.0000000\n\n\n\n\n\n\n\n\n\nIn the code below, we perform different data pre-processing for the different ARDs we want to create. Then, we generate separate ARDs using the {cards} package for the different sections of the AET02 table and compare them as subsets. Note: If your table does not have an “overall” column, you can use the ARD creation steps at the bottom of the page using primarily ard_categorical(). ard_hierarchical() is useful here to calculate the statistics for the overall column and allows for better filtering using the “context” column.\n\nlibrary(cards)\nlibrary(dplyr)\n\n# data pre-processing\nadae &lt;- syn_data$adae\nadsl &lt;- syn_data$adsl\n\n# Keep only 1 record per patient\nadae_one_sub &lt;- adae %&gt;% \n  filter(!duplicated(adae[c(\"USUBJID\")]))\n\n# Keep only 1 record per patient for each AEBODSYS\nadae_one_sub_aebod &lt;- adae %&gt;% \n  filter(!duplicated(adae[c(\"USUBJID\", \"AEBODSYS\")]))\n\n# ----- ARDS -----\n# Total number of patients with at least one adverse event  \ntot_pat_ae &lt;- ard_stack_hierarchical(\n  data = adae_one_sub,\n  id = \"USUBJID\",\n  variables = c(SAFFL),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\"),\n  overall = TRUE) |&gt;\n  dplyr::filter(context == \"hierarchical\") |&gt; ## removing univariate analysis\n  shuffle_ard(trim = FALSE) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_))) # convert list to numeric\n\n# Total number of AEs \ntot_ae &lt;- ard_stack_hierarchical_count(\n  data = adae,\n  variables = c(SAFFL),\n  denominator = adsl,\n  by = ARM,\n  overall = TRUE) |&gt;\n  dplyr::filter(context == \"hierarchical_count\") |&gt; ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)), \n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of patients with at least one adverse event within each AEBODSYS\ntot_pat_ae_aebod &lt;- ard_stack_hierarchical(\n  id = \"USUBJID\",\n  data = adae_one_sub_aebod,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  overall = TRUE,\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::filter(context == \"hierarchical\") |&gt;  ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Total number of AEs for each AEBODSYS\ntot_ae_aebod &lt;- ard_stack_hierarchical_count(\n  data = adae,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  overall = TRUE) |&gt; \n  shuffle_ard(trim = FALSE) |&gt;\n  dplyr::filter(context == \"hierarchical_count\") |&gt; ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Count and Percent for each AEDECOD within each AEBODSYS\nae_n_p_aedecod &lt;- ard_stack_hierarchical(\n  data = adae,\n  id = \"USUBJID\",\n  variables = c(AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\"),\n  overall = TRUE) |&gt; \n  shuffle_ard(trim = FALSE) |&gt; \n  dplyr::filter(context == \"hierarchical\", \n                variable == \"AEDECOD\") |&gt; \n  dplyr::mutate(\n    # convert list numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n\n\n\nWe’ll modify the rtables result to closely match the ARD result:\n\nRename “group2_level” to ARM\nRemove any columns that aren’t in the ARD result (stat_name is being removed as it is a blank column)\n\n\n\nShow the code\nrtables_result &lt;- rtables_result %&gt;%\n  dplyr::rename(ARM = group2_level)%&gt;%\n  dplyr::select(-c(\"stat_name\", \"group2\"))\n\nhead(rtables_result, n=10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nARM\nvariable\nvariable_level\nvariable_label\nstat\n\n\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\n13.0000000\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\n0.8666667\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nnonunique\nOverall total number of events\n58.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\n7.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\n0.4666667\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nnonunique\nTotal number of events\n8.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\n3.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\n0.2000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\n5.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\n0.3333333\n\n\n\n\n\n\nBecause the subsets of AET02 table are already separated in the ARDs, we can subset the {rtables} result equally to create a clean comparison.\n\n\n\ntot_pat_ae &lt;- tot_pat_ae |&gt; dplyr::select(c(\"ARM\", \"stat\"))\n\ntot_pat_ae_rtables &lt;- rtables_result %&gt;%\n  filter(variable_label == \"Total number of patients with at least one adverse event\" & variable == \"USUBJID\") |&gt;\n  dplyr::select(\"ARM\", \"stat\")\n\nlibrary(diffdf)\ndiffdf(tot_pat_ae, tot_pat_ae_rtables, keys = c(\"ARM\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_ae &lt;- tot_ae |&gt;   \n  dplyr::rename(ARM = group1_level) |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM))|&gt;\n  dplyr::select(c(\"ARM\", \"stat\"))\n\ntot_ae_rtables &lt;- rtables_result %&gt;%\n  filter(variable == \"USUBJID\" & variable_label == \"Overall total number of events\")|&gt;\n  dplyr::select(\"ARM\", \"stat\")\n\ndiffdf(tot_ae, tot_ae_rtables, keys = c(\"ARM\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_pat_ae_aebod &lt;- tot_pat_ae_aebod %&gt;%\n  dplyr::rename(ARM = group1_level) |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM))|&gt;\n  dplyr::select(c(\"ARM\", \"variable\", \"variable_level\", \"stat\")) |&gt;\n  dplyr::mutate(\n    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\ntot_pat_ae_aebod_rtables &lt;- rtables_result %&gt;%\n   filter(variable_level == \"unique\" & variable_label == \"Total number of patients with at least one adverse event\" & group1 == \"AEBODSYS\") |&gt;\n  dplyr::select(c(\"ARM\", \"variable\", \"stat\", \"group1_level\")) |&gt;\n  dplyr::rename(variable_level = group1_level)\n\ndiffdf(tot_pat_ae_aebod, tot_pat_ae_aebod_rtables, keys = c(\"ARM\", \"variable_level\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_ae_aebod &lt;- tot_ae_aebod |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ntot_ae_aebod_rtables &lt;- rtables_result %&gt;%\n  filter(variable_label == \"Total number of events\") |&gt;\n    dplyr::rename(label = group1_level) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ndiffdf(tot_ae_aebod, tot_ae_aebod_rtables, keys = c(\"ARM\", \"label\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\nae_n_p_aedecod &lt;- ae_n_p_aedecod |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM)) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\nae_n_p_aedecod_rtables &lt;- rtables_result %&gt;%\n  filter(variable == \"AEDECOD\") |&gt;\n    dplyr::rename(label = variable_label) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ndiffdf(ae_n_p_aedecod, ae_n_p_aedecod_rtables, keys = c(\"ARM\", \"label\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\n\nlibrary(cards)\nlibrary(dplyr)\n\n# some data pre-processing\nadae &lt;- syn_data$adae\nadsl &lt;- syn_data$adsl\n\n# Keep only 1 record per patient\nadae_one_sub &lt;- adae %&gt;% \n  filter(!duplicated(adae[c(\"USUBJID\")]))\n\n# Keep only 1 record per patient for each AEBODSYS\nadae_one_sub_aebod &lt;- adae %&gt;% \n  filter(!duplicated(adae[c(\"USUBJID\", \"AEBODSYS\")]))\n\n\n# ----- ARDS -----\n# Total number of patients with at least one adverse event  ## removing univariate analysis\ntot_pat_ae &lt;- ard_categorical(\n  data = adae_one_sub,\n  variables = c(SAFFL),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of AEs \ntot_ae &lt;- ard_categorical(\n  data = adae,\n  variables = c(SAFFL),\n  denominator = adsl,\n  by = ARM,\n  statistic = everything() ~ c(\"n\")) |&gt;\n  dplyr::mutate(\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of patients with at least one adverse event within each AEBODSYS\ntot_pat_ae_aebod &lt;- ard_categorical(\n  data = adae_one_sub_aebod,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Total number of AEs for each AEBODSYS\ntot_ae_aebod &lt;- ard_categorical(\n  data = adae,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\")) |&gt; \n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n  \n# Count and Percent for each AEDECOD within each AEBODSYS\nae_n_p_aedecod &lt;- ard_stack_hierarchical(\n  data = adae,\n  id = \"USUBJID\",\n  variables = c(AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt; \n  dplyr::filter(context == \"hierarchical\", \n                variable == \"AEDECOD\") |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))",
    "crumbs": [
      "Adverse Events Table"
    ]
  },
  {
    "objectID": "quarto/02-QC-AET02.html#adverse-events-aet02-qc-workflow",
    "href": "quarto/02-QC-AET02.html#adverse-events-aet02-qc-workflow",
    "title": "QCing Adverse Events (AET02)",
    "section": "",
    "text": "Show the code\nlibrary(chevron)\n\ntlg_aet02 &lt;- chevron:: aet02_main(syn_data, arm_var = \"ARM\", lbl_overall = \"Overall ARM\")\nhead(tlg_aet02, n=15) #truncated preview\n\n\n                                                             A: Drug X    B: Placebo   C: Combination   Overall ARM\n                                                               (N=15)       (N=15)         (N=15)         (N=45)   \n———————————————————————————————————————————————————————————————————————————————————————————————————————————————————\nTotal number of patients with at least one adverse event     13 (86.7%)   14 (93.3%)     15 (100%)      42 (93.3%) \nOverall total number of events                                   58           59             99             216    \ncl A.1                                                                                                             \n  Total number of patients with at least one adverse event   7 (46.7%)    6 (40.0%)      10 (66.7%)     23 (51.1%) \n  Total number of events                                         8            11             16             35     \n  dcd A.1.1.1.1                                              3 (20.0%)     1 (6.7%)      6 (40.0%)      10 (22.2%) \n  dcd A.1.1.1.2                                              5 (33.3%)    6 (40.0%)      6 (40.0%)      17 (37.8%) \ncl B.1                                                                                                             \n  Total number of patients with at least one adverse event   5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \n  Total number of events                                         6            6              12             24     \n  dcd B.1.1.1.1                                              5 (33.3%)    6 (40.0%)      8 (53.3%)      19 (42.2%) \ncl B.2                                                                                                             \n  Total number of patients with at least one adverse event   11 (73.3%)   8 (53.3%)      10 (66.7%)     29 (64.4%) \n  Total number of events                                         18           15             20             53     \n  dcd B.2.1.2.1                                              5 (33.3%)    6 (40.0%)      5 (33.3%)      16 (35.6%) \n\n\n\n\n\nA {rtables} based output can be flattened into a data.frame using the as_results_df() function from the {rtables} package. The make_ard argument set to TRUE, will format the data similar to the output generated by the {cards} package. Setting the add_tbl_str_decimals to FALSE will not return a column with the statistic as a formatted string. We also include a step to remove the “label” attribute for the statistics. The diffdf() function is sensitive to attribute mismatch, so we will remove them (set to NULL) to match the ARD results exactly.\n\nrtables_result &lt;- rtables::as_result_df(tlg_aet02, make_ard = TRUE, add_tbl_str_decimals = FALSE)\nattr(rtables_result$stat, \"label\") &lt;- NULL\n\nrtables_result[1:6, -c(1:2, 7,8)]\n\n\n\n\n\ngroup2\ngroup2_level\nvariable\nvariable_level\nstat\n\n\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n13.0000000\n\n\nARM\nA: Drug X\nUSUBJID\nunique\n0.8666667\n\n\nARM\nA: Drug X\nUSUBJID\nnonunique\n58.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n7.0000000\n\n\nARM\nA: Drug X\nAEBODSYS\nunique\n0.4666667\n\n\nARM\nA: Drug X\nAEBODSYS\nnonunique\n8.0000000\n\n\n\n\n\n\n\n\n\nIn the code below, we perform different data pre-processing for the different ARDs we want to create. Then, we generate separate ARDs using the {cards} package for the different sections of the AET02 table and compare them as subsets. Note: If your table does not have an “overall” column, you can use the ARD creation steps at the bottom of the page using primarily ard_categorical(). ard_hierarchical() is useful here to calculate the statistics for the overall column and allows for better filtering using the “context” column.\n\nlibrary(cards)\nlibrary(dplyr)\n\n# data pre-processing\nadae &lt;- syn_data$adae\nadsl &lt;- syn_data$adsl\n\n# Keep only 1 record per patient\nadae_one_sub &lt;- adae %&gt;% \n  filter(!duplicated(adae[c(\"USUBJID\")]))\n\n# Keep only 1 record per patient for each AEBODSYS\nadae_one_sub_aebod &lt;- adae %&gt;% \n  filter(!duplicated(adae[c(\"USUBJID\", \"AEBODSYS\")]))\n\n# ----- ARDS -----\n# Total number of patients with at least one adverse event  \ntot_pat_ae &lt;- ard_stack_hierarchical(\n  data = adae_one_sub,\n  id = \"USUBJID\",\n  variables = c(SAFFL),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\"),\n  overall = TRUE) |&gt;\n  dplyr::filter(context == \"hierarchical\") |&gt; ## removing univariate analysis\n  shuffle_ard(trim = FALSE) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_))) # convert list to numeric\n\n# Total number of AEs \ntot_ae &lt;- ard_stack_hierarchical_count(\n  data = adae,\n  variables = c(SAFFL),\n  denominator = adsl,\n  by = ARM,\n  overall = TRUE) |&gt;\n  dplyr::filter(context == \"hierarchical_count\") |&gt; ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)), \n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of patients with at least one adverse event within each AEBODSYS\ntot_pat_ae_aebod &lt;- ard_stack_hierarchical(\n  id = \"USUBJID\",\n  data = adae_one_sub_aebod,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  overall = TRUE,\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::filter(context == \"hierarchical\") |&gt;  ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Total number of AEs for each AEBODSYS\ntot_ae_aebod &lt;- ard_stack_hierarchical_count(\n  data = adae,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  overall = TRUE) |&gt; \n  shuffle_ard(trim = FALSE) |&gt;\n  dplyr::filter(context == \"hierarchical_count\") |&gt; ## removing univariate analysis\n  dplyr::mutate(\n    # convert lists to character and numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Count and Percent for each AEDECOD within each AEBODSYS\nae_n_p_aedecod &lt;- ard_stack_hierarchical(\n  data = adae,\n  id = \"USUBJID\",\n  variables = c(AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\"),\n  overall = TRUE) |&gt; \n  shuffle_ard(trim = FALSE) |&gt; \n  dplyr::filter(context == \"hierarchical\", \n                variable == \"AEDECOD\") |&gt; \n  dplyr::mutate(\n    # convert list numeric\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n\n\n\nWe’ll modify the rtables result to closely match the ARD result:\n\nRename “group2_level” to ARM\nRemove any columns that aren’t in the ARD result (stat_name is being removed as it is a blank column)\n\n\n\nShow the code\nrtables_result &lt;- rtables_result %&gt;%\n  dplyr::rename(ARM = group2_level)%&gt;%\n  dplyr::select(-c(\"stat_name\", \"group2\"))\n\nhead(rtables_result, n=10)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup1\ngroup1_level\nARM\nvariable\nvariable_level\nvariable_label\nstat\n\n\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\n13.0000000\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nunique\nTotal number of patients with at least one adverse event\n0.8666667\n\n\nNA\nNA\nA: Drug X\nUSUBJID\nnonunique\nOverall total number of events\n58.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\n7.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nunique\nTotal number of patients with at least one adverse event\n0.4666667\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEBODSYS\nnonunique\nTotal number of events\n8.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\n3.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.1\ndcd A.1.1.1.1\n0.2000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\n5.0000000\n\n\nAEBODSYS\ncl A.1\nA: Drug X\nAEDECOD\ndcd A.1.1.1.2\ndcd A.1.1.1.2\n0.3333333\n\n\n\n\n\n\nBecause the subsets of AET02 table are already separated in the ARDs, we can subset the {rtables} result equally to create a clean comparison.\n\n\n\ntot_pat_ae &lt;- tot_pat_ae |&gt; dplyr::select(c(\"ARM\", \"stat\"))\n\ntot_pat_ae_rtables &lt;- rtables_result %&gt;%\n  filter(variable_label == \"Total number of patients with at least one adverse event\" & variable == \"USUBJID\") |&gt;\n  dplyr::select(\"ARM\", \"stat\")\n\nlibrary(diffdf)\ndiffdf(tot_pat_ae, tot_pat_ae_rtables, keys = c(\"ARM\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_ae &lt;- tot_ae |&gt;   \n  dplyr::rename(ARM = group1_level) |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM))|&gt;\n  dplyr::select(c(\"ARM\", \"stat\"))\n\ntot_ae_rtables &lt;- rtables_result %&gt;%\n  filter(variable == \"USUBJID\" & variable_label == \"Overall total number of events\")|&gt;\n  dplyr::select(\"ARM\", \"stat\")\n\ndiffdf(tot_ae, tot_ae_rtables, keys = c(\"ARM\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_pat_ae_aebod &lt;- tot_pat_ae_aebod %&gt;%\n  dplyr::rename(ARM = group1_level) |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM))|&gt;\n  dplyr::select(c(\"ARM\", \"variable\", \"variable_level\", \"stat\")) |&gt;\n  dplyr::mutate(\n    ARM = purrr::map_chr(ARM, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n    variable_level = purrr::map_chr(variable_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\ntot_pat_ae_aebod_rtables &lt;- rtables_result %&gt;%\n   filter(variable_level == \"unique\" & variable_label == \"Total number of patients with at least one adverse event\" & group1 == \"AEBODSYS\") |&gt;\n  dplyr::select(c(\"ARM\", \"variable\", \"stat\", \"group1_level\")) |&gt;\n  dplyr::rename(variable_level = group1_level)\n\ndiffdf(tot_pat_ae_aebod, tot_pat_ae_aebod_rtables, keys = c(\"ARM\", \"variable_level\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\ntot_ae_aebod &lt;- tot_ae_aebod |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ntot_ae_aebod_rtables &lt;- rtables_result %&gt;%\n  filter(variable_label == \"Total number of events\") |&gt;\n    dplyr::rename(label = group1_level) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ndiffdf(tot_ae_aebod, tot_ae_aebod_rtables, keys = c(\"ARM\", \"label\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\nae_n_p_aedecod &lt;- ae_n_p_aedecod |&gt;\n  dplyr::mutate(ARM = ifelse(is.na(ARM), \"Overall ARM\", ARM)) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\nae_n_p_aedecod_rtables &lt;- rtables_result %&gt;%\n  filter(variable == \"AEDECOD\") |&gt;\n    dplyr::rename(label = variable_label) |&gt;\n  dplyr::select(c(\"ARM\", \"label\", \"stat\"))\n\ndiffdf(ae_n_p_aedecod, ae_n_p_aedecod_rtables, keys = c(\"ARM\", \"label\", \"stat\"))\n\nNo issues were found!\n\n\n\n\n\n\n\nlibrary(cards)\nlibrary(dplyr)\n\n# some data pre-processing\nadae &lt;- syn_data$adae\nadsl &lt;- syn_data$adsl\n\n# Keep only 1 record per patient\nadae_one_sub &lt;- adae %&gt;% \n  filter(!duplicated(adae[c(\"USUBJID\")]))\n\n# Keep only 1 record per patient for each AEBODSYS\nadae_one_sub_aebod &lt;- adae %&gt;% \n  filter(!duplicated(adae[c(\"USUBJID\", \"AEBODSYS\")]))\n\n\n# ----- ARDS -----\n# Total number of patients with at least one adverse event  ## removing univariate analysis\ntot_pat_ae &lt;- ard_categorical(\n  data = adae_one_sub,\n  variables = c(SAFFL),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of AEs \ntot_ae &lt;- ard_categorical(\n  data = adae,\n  variables = c(SAFFL),\n  denominator = adsl,\n  by = ARM,\n  statistic = everything() ~ c(\"n\")) |&gt;\n  dplyr::mutate(\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)),\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n\n# Total number of patients with at least one adverse event within each AEBODSYS\ntot_pat_ae_aebod &lt;- ard_categorical(\n  data = adae_one_sub_aebod,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)),\n    group1_level = purrr::map_chr(group1_level, ~ ifelse(length(.x) &gt; 0, as.character(.x[[1]]), NA_character_)))\n\n# Total number of AEs for each AEBODSYS\ntot_ae_aebod &lt;- ard_categorical(\n  data = adae,\n  variables = c(AEBODSYS),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\")) |&gt; \n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))\n  \n# Count and Percent for each AEDECOD within each AEBODSYS\nae_n_p_aedecod &lt;- ard_stack_hierarchical(\n  data = adae,\n  id = \"USUBJID\",\n  variables = c(AEBODSYS, AEDECOD),\n  by = c(ARM),\n  denominator = adsl,\n  statistic = everything() ~ c(\"n\", \"p\")) |&gt; \n  dplyr::filter(context == \"hierarchical\", \n                variable == \"AEDECOD\") |&gt;\n  dplyr::mutate(\n    stat = purrr::map_dbl(stat, ~ ifelse(length(.x) &gt; 0, as.numeric(.x[[1]]), NA_character_)))",
    "crumbs": [
      "Adverse Events Table"
    ]
  }
]